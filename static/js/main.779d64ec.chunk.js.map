{"version":3,"sources":["store/middleware/logger.js","game/utils.js","game/flags.js","store/reducers/board.js","store/constants/actions.js","game/maths.js","store/reducers/game.js","store/actions/board.js","Board.js","store/actions/game.js","Configuration.js","App.js","index.js","store/configureStore.js"],"names":["logger","store","next","action","console","group","type","info","result","log","getState","groupEnd","genGobanCharArray","numColumns","Error","columnLabels","i","length","currentCharacter","String","fromCharCode","push","getCharacterFromOffset","offset","getOffsetFromCharacter","character","originalCharacterCode","charCodeAt","GOBAN_WIDTH_TO_HEIGHT_RATIO","Number","GOBAN_HEIGHT_TO_WIDTH_RATIO","GOBAN_STONE_DIAMETER_TO_TILE_HEIGHT_RATIO","CORNER_ALL_NW","concat","CORNER_9_x_9_NE","CORNER_9_x_9_SE","CORNER_9_x_9_SW","CORNER_13_x_13_NE","CORNER_13_x_13_SE","CORNER_13_x_13_SW","CORNER_19_x_19_NE","CORNER_19_x_19_SE","CORNER_19_x_19_SW","CORNERS_9_x_9","STAR_POINTS_9_x_9","CORNERS_13_x_13","STAR_POINTS_13_x_13","CORNERS_19_x_19","STAR_POINTS_19_x_19","SIDES_9_x_9","Object","toConsumableArray","_","row","UTILS","col","SIDES_13_x_13","SIDES_19_x_19","GRID_COORDINATES_9_x_9","GRID_COORDINATES_13_x_13","GRID_COORDINATES_19_x_19","initialState","alteredStones","Set","mode","koViolation","currentBoardState","previousBoardState","previousStone","penultimateStone","board","state","arguments","undefined","payload","objectSpread","_action$payload","nextBoardState","placedStone","_action$payload2","colCoordinate","rowCoordinate","getCardinalDirection","coordinate","FLAGS","substring","getCardinalAdjacencies","_ref3","coordinates","maxIndex","colOffset","rowOffset","parseInt","adjacencies","north","east","south","west","getAdjacentCoordinates","_ref4","boardDimensions","height","width","canRender","maxOffsets","tileDimensions","turnColor","turnNumber","windowHeight","windowWidth","blackCaptures","whiteCaptures","lastPreviewStone","getDimensions","_ref","desiredWidth","desiredHeight","Math","floor","GAME_MATHS","_ref2","boardHeight","boardWidth","tileRatio","game","_getDimensions","_getDimensions2","setStone","dispatch","_getState$game","_getState$board","color","_ref5","existingStones","newStoneColor","newStoneColCoordinate","newStoneRowCoordinate","opposingColor","newStones","defineProperty","cardinalAdjacencyMap","nextAdjacentCoordinates","attackedGroups","stones","liberties","isCoordinateProcessed","direction","shouldProcessCoordinate","attackedGroup","coordinateToProcess","apply","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","value","aCoordinate","err","return","stonesToRemove","survivingAttackedGroups","_i","_stonesToRemove","koWarning","_ref6","add","Board","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onMouseMove","bind","assertThisInitialized","onMouseOut","onClick","calculatePreviewStone","renderWholeBoard","prevProps","canvasContext","getCanvasContextPresets","drawTile","clearRect","JSON","stringify","isKoViolation","refs","canvas","getContext","lineWidth","strokeStyle","_this$props","stonePlaced","clearCanvas","includes","drawIntersection","drawStarPoint","drawSide","drawCorner","drawStone","_this$props2","cardinalDirection","min_X","min_Y","mid_X","mid_Y","max_X","max_Y","beginPath","font","moveTo","lineTo","fillText","stroke","_this$props3","arc","PI","fillStyle","fill","drawStoneInternal","isBlack","_this$props4","stoneRadius","previousColOffset","previousRowOffset","_this$props5","setLastPreviewStone","currentColCoordinate","currentRowCoordinate","resetLastPreviewStone","aRow","rowIndex","_this2","numberCoordinate","colIndex","letterCoordinate","_this3","getCoordinates","index","renderRow","x","y","_this$props6","offsets","_ref7","getOffsetsWithinBounds","e","showPreviewStone","_this$props7","clientX","clientY","theCoordinate","react_default","a","createElement","ref","Component","connect","tileHeight","_state$game","_state$board","Configuration","setMode","id","className","getHumanReadableMode","onChange","target","App","updateWindowDimensions","window","addEventListener","removeEventListener","setWindowDimensions","innerWidth","innerHeight","src_Board","src_Configuration","preloadedState","enhancers","applyMiddleware","thunkMiddleware","loggerMiddleware","composedEnhancers","composeWithDevTools","rootReducer","combineReducers","boardReducer","gameReducer","createStore","configureStore","rootElement","document","getElementById","ReactDOM","render","es","src_App"],"mappings":"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","file":"static/js/main.779d64ec.chunk.js","sourcesContent":["const logger = store => next => action => {\n    console.group(action.type);\n    console.info('dispatching', action);\n    let result = next(action);\n    console.log('next state', store.getState());\n    console.groupEnd();\n    return result;\n};\n\nexport default logger;","// Skips I, very intelligent\nexport const genGobanCharArray = (numColumns) => {\n    if (numColumns < 1) {\n        throw new Error('Please expect more than one column for a standard board...');\n    }\n\n    let columnLabels = [];\n\n    for (let i = 65; columnLabels.length < numColumns; ++i) {\n        const currentCharacter = String.fromCharCode(i);\n        if ('I' !== currentCharacter) {\n            columnLabels.push(currentCharacter);\n        }\n    }\n\n    return columnLabels;\n};\n\nexport const getCharacterFromOffset = (offset) => {\n    if (offset < 8) {\n        return String.fromCharCode(offset + 65);\n    } else {\n        // accounting for I...\n        return String.fromCharCode(offset + 66);\n    }\n};\n\nexport const getOffsetFromCharacter = (character) => {\n    const originalCharacterCode = character.charCodeAt(0);\n\n    if (originalCharacterCode < 74) {\n        return originalCharacterCode - 65;\n    } else {\n        // this accounts for the 'I' offset\n        return originalCharacterCode - 66;\n    }\n};","import * as _ from 'lodash';\nimport * as UTILS from './utils';\n\n// yeehaw constants and pointers and strings oh my\n\n// Ratios expertly calculated from here\n//https://senseis.xmp.net/?EquipmentDimensions\nexport const GOBAN_WIDTH_TO_HEIGHT_RATIO = Number(1.071428571428571);\nexport const GOBAN_HEIGHT_TO_WIDTH_RATIO = Number(0.933333333333333);\n\n// I made this up\nexport const GOBAN_STONE_DIAMETER_TO_TILE_HEIGHT_RATIO = Number(0.88);\n\nexport const TURN_BLACK = 'TURN_BLACK';\nexport const TURN_WHITE = 'TURN_WHITE';\n\nexport const STONE_NONE = 'STONE_NONE';\nexport const STONE_BLACK = 'STONE_BLACK';\nexport const STONE_WHITE = 'STONE_WHITE';\n\nexport const GAME_9_x_9 = 'GAME_9_x_9';\nexport const GAME_13_x_13 = 'GAME_13_x_13';\nexport const GAME_19_x_19 = 'GAME_19_x_19';\n\nexport const NORTH = 'NORTH';\nexport const NORTH_EAST = 'NORTH_EAST';\nexport const EAST = 'EAST';\nexport const SOUTH_EAST = 'SOUTH_EAST';\nexport const SOUTH = 'SOUTH';\nexport const SOUTH_WEST = 'SOUTH_WEST';\nexport const WEST = 'WEST';\nexport const NORTH_WEST = 'NORTH_WEST';\n\nexport const MIN_COLUMN = 'A';\nexport const MIN_SIDE_COLUMN = 'B';\nexport const MIN_ROW = '1';\n\nexport const MAX_9_x_9_COLUMN = 'J';\nexport const MAX_EASTWARD_9_x_9_COLUMN_FOR_NORTH_SOUTH = 'H';\nexport const MAX_9_x_9_ROW    = '9';\n\nexport const MAX_13_x_13_COLUMN = 'N';\nexport const MAX_EASTWARD_13_x_13_COLUMN_FOR_NORTH_SOUTH = 'L';\nexport const MAX_13_x_13_ROW    = '13';\n\nexport const MAX_19_x_19_COLUMN = 'T';\nexport const MAX_EASTWARD_19_x_19_COLUMN_FOR_NORTH_SOUTH = 'S';\nexport const MAX_19_x_19_ROW    = '19';\n\n// it's always a1 doofus\nexport const CORNER_ALL_NW = `${MIN_COLUMN}${MIN_ROW}`;\n\nexport const CORNER_9_x_9_NE = `${MAX_9_x_9_COLUMN}${MIN_ROW}`;\nexport const CORNER_9_x_9_SE = `${MAX_9_x_9_COLUMN}${MAX_9_x_9_ROW}`;\nexport const CORNER_9_x_9_SW = `${MIN_COLUMN}${MAX_9_x_9_ROW}`;\n\nexport const CORNER_13_x_13_NE = `${MAX_13_x_13_COLUMN}${MIN_ROW}`;\nexport const CORNER_13_x_13_SE = `${MAX_13_x_13_COLUMN}${MAX_13_x_13_ROW}`;\nexport const CORNER_13_x_13_SW = `${MIN_COLUMN}${MAX_13_x_13_ROW}`;\n\nexport const CORNER_19_x_19_NE = `${MAX_19_x_19_COLUMN}${MIN_ROW}`;\nexport const CORNER_19_x_19_SE = `${MAX_19_x_19_COLUMN}${MAX_19_x_19_ROW}`;\nexport const CORNER_19_x_19_SW = `${MIN_COLUMN}${MAX_19_x_19_ROW}`;\n\nexport const CORNERS_9_x_9 = [\n    CORNER_ALL_NW,\n    CORNER_9_x_9_NE,\n    CORNER_9_x_9_SE,\n    CORNER_9_x_9_SW,\n];\n\nexport const STAR_POINTS_9_x_9 = [\n    'C3','G3','E5', 'C7', 'G7',\n];\n\nexport const CORNERS_13_x_13 = [\n    `${MIN_COLUMN}${MIN_ROW}`,\n    `${MIN_COLUMN}${MAX_13_x_13_ROW}`,\n    `${MAX_13_x_13_COLUMN}${MIN_ROW}`,\n    `${MAX_13_x_13_COLUMN}${MAX_13_x_13_ROW}`,\n];\n\nexport const STAR_POINTS_13_x_13 = [\n    'D4','J4','G7', 'J10', 'D10',\n];\n\nexport const CORNERS_19_x_19 = [\n    `${MIN_COLUMN}${MIN_ROW}`,\n    `${MIN_COLUMN}${MAX_19_x_19_ROW}`,\n    `${MAX_19_x_19_COLUMN}${MIN_ROW}`,\n    `${MAX_19_x_19_COLUMN}${MAX_19_x_19_ROW}`,\n];\n\nexport const STAR_POINTS_19_x_19 = [\n    'D4', 'D10', 'D16', 'J4', 'J10', 'J16', 'P4', 'P10', 'P16',\n];\n\nexport const SIDES_9_x_9 = [\n    ..._.map(_.range(2, 9), row => `${MIN_COLUMN}${row}`),\n    ..._.map(_.range(2, 9), row => `${MAX_9_x_9_COLUMN}${row}`),\n    ..._.map(UTILS.genGobanCharArray(8), col => `${col}9`),\n    ..._.map(UTILS.genGobanCharArray(8), col => `${col}1`),\n];\n\nexport const SIDES_13_x_13 = [\n    ..._.map(_.range(2, 13), row => `${MIN_COLUMN}${row}`),\n    ..._.map(_.range(2, 13), row => `${MAX_13_x_13_COLUMN}${row}`),\n    ..._.map(UTILS.genGobanCharArray(12), col => `${col}13`),\n    ..._.map(UTILS.genGobanCharArray(12), col => `${col}1`),\n];\n\nexport const SIDES_19_x_19 = [\n    ..._.map(_.range(2, 19), row => `${MIN_COLUMN}${row}`),\n    ..._.map(_.range(2, 19), row => `${MAX_19_x_19_COLUMN}${row}`),\n    ..._.map(UTILS.genGobanCharArray(18), col => `${col}19`),\n    ..._.map(UTILS.genGobanCharArray(18), col => `${col}1`),\n];\n\nexport const GRID_COORDINATES_9_x_9 =\n    _.map(_.range(1, 10), row => {\n        return _.map(UTILS.genGobanCharArray(9), col => `${col}${row}`);\n    })\n;\n\nexport const GRID_COORDINATES_13_x_13 =\n    _.map(_.range(1, 14), row => {\n        return _.map(UTILS.genGobanCharArray(13), col => `${col}${row}`);\n    })\n;\n\nexport const GRID_COORDINATES_19_x_19 =\n    _.map(_.range(1, 20), row => {\n        return _.map(UTILS.genGobanCharArray(19), col => `${col}${row}`);\n    })\n;","import * as FLAGS from '../../game/flags';\nimport * as ACTIONS from '../constants/actions';\n\n// This maintains a map of coordinates as keys to placed stones.\n// the state is somewhat dynamic but predictable based on the\n// generally agreed upon goban coordinates\nconst initialState = {\n    alteredStones: new Set(),\n    mode: FLAGS.GAME_9_x_9,\n    koViolation: '',\n    currentBoardState: {},\n    previousBoardState: {},\n    previousStone: '',\n    penultimateStone: '', // means 'second to last', quite literally\n};\n\nconst board = (state = initialState, action) => {\n    switch (action.type) {\n        case ACTIONS.SET_MODE:\n            const { mode } = action.payload;\n\n            return {\n                ...initialState,\n                mode,\n            };\n        case ACTIONS.UPDATE_STONES:\n            const {\n                alteredStones,\n                nextBoardState,\n                placedStone,\n            } = action.payload;\n\n            // ALTERED STONES GOES TO GAME MATHS\n            return {\n                ...state,\n                alteredStones,\n                koViolation: '',\n                currentBoardState: nextBoardState,\n                previousBoardState: state.currentBoardState,\n                penultimateStone: state.previousStone,\n                previousStone: placedStone,\n            };\n        case ACTIONS.KO_WARNING:\n            const {\n                colCoordinate,\n                rowCoordinate,\n            } = action.payload;\n\n            return {\n                ...state,\n                koViolation: `${colCoordinate}${rowCoordinate}`,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default board;","export const KO_WARNING = 'KO_WARNING';\nexport const SET_MODE = 'SET_MODE';\nexport const SET_LAST_PREVIEW_STONE = 'SET_LAST_PREVIEW_STONE';\nexport const UPDATE_STONES = 'UPDATE_STONES';\nexport const SET_WINDOW_DIMENSIONS = 'SET_WINDOW_DIMENSIONS';","import * as _ from 'lodash';\nimport * as FLAGS from './flags';\nimport * as UTILS from \"./utils\";\n\nexport const getCornersConstant = (mode) => {\n    if (FLAGS.GAME_9_x_9 === mode) {\n        return FLAGS.CORNERS_9_x_9;\n    } else if (FLAGS.GAME_13_x_13 === mode) {\n        return FLAGS.CORNERS_13_x_13;\n    } else if (FLAGS.GAME_19_x_19 === mode) {\n        return FLAGS.CORNERS_19_x_19;\n    }\n};\n\nexport const getSidesConstant = (mode) => {\n    if (FLAGS.GAME_9_x_9 === mode) {\n        return FLAGS.SIDES_9_x_9;\n    } else if (FLAGS.GAME_13_x_13 === mode) {\n        return FLAGS.SIDES_13_x_13;\n    } else if (FLAGS.GAME_19_x_19 === mode) {\n        return FLAGS.SIDES_19_x_19;\n    }\n};\n\nexport const getStarPointsConstant = (mode) => {\n    if (FLAGS.GAME_9_x_9 === mode) {\n        return FLAGS.STAR_POINTS_9_x_9;\n    } else if (FLAGS.GAME_13_x_13 === mode) {\n        return FLAGS.STAR_POINTS_13_x_13;\n    } else if (FLAGS.GAME_19_x_19 === mode) {\n        return FLAGS.STAR_POINTS_19_x_19;\n    }\n};\n\nexport const getCardinalDirection = (mode, coordinate) => {\n    if (FLAGS.CORNER_ALL_NW === coordinate) {\n        return FLAGS.NORTH_WEST;\n    } \n    \n    if (FLAGS.GAME_9_x_9 === mode) {\n        if (FLAGS.CORNER_9_x_9_SW === coordinate) {\n            return FLAGS.SOUTH_WEST;\n        } else if (FLAGS.CORNER_9_x_9_NE === coordinate) {\n            return FLAGS.NORTH_EAST;\n        } else if (FLAGS.CORNER_9_x_9_SE === coordinate) {\n            return FLAGS.SOUTH_EAST;\n        } else { // let me die I made these so cumbersome\n            if (FLAGS.MIN_COLUMN === coordinate[0]) {\n                return FLAGS.WEST;\n            } else if (FLAGS.MIN_ROW === coordinate.substring(1)) {\n                return FLAGS.NORTH;\n            } else if (FLAGS.MAX_9_x_9_COLUMN === coordinate[0]) {\n                return FLAGS.EAST;\n            } else if (FLAGS.MAX_9_x_9_ROW === coordinate.substring(1)) {\n                return FLAGS.SOUTH;\n            }\n        }\n\n        throw new Error(`Avast ye matey, shouldn'nt be branching to this island in mode [${mode}], coordinate [${coordinate}]`);\n    }\n\n    if (FLAGS.GAME_13_x_13 === mode) {\n        if (FLAGS.CORNER_13_x_13_SW === coordinate) {\n            return FLAGS.SOUTH_WEST;\n        } else if (FLAGS.CORNER_13_x_13_NE === coordinate) {\n            return FLAGS.NORTH_EAST;\n        } else if (FLAGS.CORNER_13_x_13_SE === coordinate) {\n            return FLAGS.SOUTH_EAST;\n        } else { // let me die I made these so cumbersome\n            if (FLAGS.MIN_COLUMN === coordinate[0]) {\n                return FLAGS.WEST;\n            } else if (FLAGS.MIN_ROW === coordinate.substring(1)) {\n                return FLAGS.NORTH;\n            } else if (FLAGS.MAX_13_x_13_COLUMN === coordinate[0]) {\n                return FLAGS.EAST;\n            } else if (FLAGS.MAX_13_x_13_ROW === coordinate.substring(1)) {\n                return FLAGS.SOUTH;\n            }\n        }\n\n        throw new Error(`Avast ye matey, shouldn'nt be branching to this island in mode [${mode}], coordinate [${coordinate}]`);\n    }\n\n    if (FLAGS.GAME_19_x_19 === mode) {\n        if (FLAGS.CORNER_19_x_19_SW === coordinate) {\n            return FLAGS.SOUTH_WEST;\n        } else if (FLAGS.CORNER_19_x_19_NE === coordinate) {\n            return FLAGS.NORTH_EAST;\n        } else if (FLAGS.CORNER_19_x_19_SE === coordinate) {\n            return FLAGS.SOUTH_EAST;\n        } else { // let me die I made these so cumbersome\n            if (FLAGS.MIN_COLUMN === coordinate[0]) {\n                return FLAGS.WEST;\n            } else if (FLAGS.MIN_ROW === coordinate.substring(1)) {\n                return FLAGS.NORTH;\n            } else if (FLAGS.MAX_19_x_19_COLUMN === coordinate[0]) {\n                return FLAGS.EAST;\n            } else if (FLAGS.MAX_19_x_19_ROW === coordinate.substring(1)) {\n                return FLAGS.SOUTH;\n            }\n        }\n\n        throw new Error(`Avast ye matey, shouldn'nt be branching to this island in mode [${mode}], coordinate [${coordinate}]`);\n    }    \n};\n\n// Calculates how much space the board can have on the screen\nexport const calculateBoardDimensions = ({\n                                     windowHeight,\n                                     windowWidth,\n                                 }) => {\n    let desiredWidth = windowHeight * FLAGS.GOBAN_HEIGHT_TO_WIDTH_RATIO;\n    desiredWidth = windowWidth > desiredWidth ? desiredWidth : windowWidth - 10; // very scientific\n    const desiredHeight = desiredWidth * FLAGS.GOBAN_WIDTH_TO_HEIGHT_RATIO;\n\n    return {\n        height: Math.floor(desiredHeight),\n        width: Math.floor(desiredWidth),\n    };\n};\n\n//https://senseis.xmp.net/?EquipmentDimensions\n// This function determines the width and height of each renderable tile.\n// corners and sides will get an additional padding for aesthetic.\nexport const calculateTileDimensions = ({\n                                     mode,\n                                     boardHeight,\n                                     boardWidth,\n                                 }) => {\n    let tileRatio = 0;\n\n    if (FLAGS.GAME_9_x_9 === mode) {\n        tileRatio = Number(1/9);\n    } else if (FLAGS.GAME_13_x_13 === mode) {\n        tileRatio = Number(1/13);\n    } else if (FLAGS.GAME_19_x_19 === mode) {\n        tileRatio = Number(1/19);\n    } else {\n        throw new Error('No known mode');\n    }\n    \n    const height = Math.floor(boardHeight * tileRatio);\n    const width = Math.floor(boardWidth * tileRatio);\n\n    // Otherwise these calculations will cause lines to be drawn outside\n    // the bounding canvas\n    return {\n        height: height % 2 === 0 ? height : height - 1,\n        width: width % 2 === 0 ? width : width - 1,\n    };\n};\n\nexport const stoneRadius = (tileHeight) => {\n    return Math.floor((tileHeight * FLAGS.GOBAN_STONE_DIAMETER_TO_TILE_HEIGHT_RATIO) / 2);\n};\n\nexport const getCardinalAdjacencies = ({\n    mode,\n    colCoordinate,\n    rowCoordinate,\n}) => {\n    let coordinates;\n\n    if (FLAGS.GAME_9_x_9 === mode) {\n        coordinates = FLAGS.GRID_COORDINATES_9_x_9;\n    } else if (FLAGS.GAME_13_x_13 === mode) {\n        coordinates = FLAGS.GRID_COORDINATES_13_x_13;\n    } else if (FLAGS.GAME_19_x_19 === mode) {\n        coordinates = FLAGS.GRID_COORDINATES_19_x_19;\n    }\n\n    const maxIndex = coordinates.length - 1;\n\n    // 'A' is ASCII 65\n    const colOffset = UTILS.getOffsetFromCharacter(colCoordinate);\n    const rowOffset = parseInt(rowCoordinate) - 1; // 0 indexed, dummy\n\n    const adjacencies = {};\n\n    if (rowOffset >= 1) {\n        adjacencies.north = coordinates[rowOffset - 1][colOffset];\n    }\n\n    if (colOffset < maxIndex) {\n        adjacencies.east = coordinates[rowOffset][colOffset + 1];\n    }\n\n    if (rowOffset < maxIndex) {\n        adjacencies.south = coordinates[rowOffset + 1][colOffset];\n    }\n\n    if (colOffset >= 1) {\n        adjacencies.west = coordinates[rowOffset][colOffset - 1];\n    }\n\n    return adjacencies;\n};\n\nexport const getAdjacentCoordinates = ({\n   mode,\n   colCoordinate,\n   rowCoordinate,\n}) => _.values(getCardinalAdjacencies({\n    mode,\n    colCoordinate,\n    rowCoordinate,\n}));\n\n// get adjacent stones of opposing color\n// get all connected stones in that opposing color group\n// determine if any of those connected stones have any liberties\n// return board state with dead groups removed\n// TODO: this can't be 100 lines long...\n\nexport const removeDeadStones = ({\n    existingStones,\n    mode,\n    newStoneColor,\n    newStoneColCoordinate,\n    newStoneRowCoordinate,\n}) => {\n    const opposingColor = FLAGS.STONE_BLACK === newStoneColor ? FLAGS.STONE_WHITE : FLAGS.STONE_BLACK;\n    const newStones = _.assign({}, existingStones, { [`${newStoneColCoordinate}${newStoneRowCoordinate}`]: newStoneColor });\n\n    // this will make sense in a few lines.. maybe\n    let cardinalAdjacencyMap = getCardinalAdjacencies({\n        mode,\n        colCoordinate: newStoneColCoordinate,\n        rowCoordinate: newStoneRowCoordinate,\n    });\n\n    let nextAdjacentCoordinates = [];\n\n    // Need to track the attacked groups separately to ensure proper removal\n    const attackedGroups = {\n        north: {\n            stones: [],\n            liberties: [],\n        },\n        east: {\n            stones: [],\n            liberties: [],\n        },\n        south: {\n            stones: [],\n            liberties: [],\n        },\n        west: {\n            stones: [],\n            liberties: [],\n        },\n    };\n\n    const isCoordinateProcessed = (coordinate) => {\n        for (const direction in attackedGroups) {\n            if (_.includes(attackedGroups[direction].stones, coordinate)) {\n                return true;\n            }\n        }\n\n        return false;\n    };\n\n    const shouldProcessCoordinate = (coordinate) => {\n        if (isCoordinateProcessed(coordinate)) {\n            return false;\n        }\n\n        if (newStones[coordinate] === opposingColor) {\n            return true;\n        }\n\n        return false;\n    };\n\n    for (const direction in cardinalAdjacencyMap) {\n        const coordinate = cardinalAdjacencyMap[direction];\n        const attackedGroup = attackedGroups[direction];\n\n        // For a while I forgot to process the initial coordinate. Smart.\n        if (shouldProcessCoordinate(coordinate)) {\n            nextAdjacentCoordinates.push(coordinate);\n            attackedGroup.stones.push(coordinate);\n        }\n\n        do {\n            // ... get adjacent allied stones and ones not already part of the group\n            nextAdjacentCoordinates = _.flatMap(nextAdjacentCoordinates, (coordinateToProcess) =>\n                _.filter(getAdjacentCoordinates({\n                    mode,\n                    colCoordinate: coordinateToProcess[0],\n                    rowCoordinate: coordinateToProcess.substring(1),\n                }), shouldProcessCoordinate)\n            );\n\n            attackedGroup.stones.push.apply(attackedGroup.stones, nextAdjacentCoordinates);\n        } while (nextAdjacentCoordinates.length !== 0);\n    }\n\n    for (const direction in attackedGroups) {\n        const attackedGroup = attackedGroups[direction];\n\n        for (const coordinateToProcess of attackedGroup.stones) {\n            nextAdjacentCoordinates = _.filter(getAdjacentCoordinates({\n                mode,\n                colCoordinate: coordinateToProcess[0],\n                rowCoordinate: coordinateToProcess.substring(1),\n            }), aCoordinate => !isCoordinateProcessed(aCoordinate)\n                && (!newStones[aCoordinate] || newStones[aCoordinate] === FLAGS.STONE_NONE));\n\n            attackedGroup.liberties.push.apply(attackedGroup.liberties, nextAdjacentCoordinates);\n        }\n    }\n\n    const stonesToRemove = [];\n    let survivingAttackedGroups = 0;\n\n    for (const direction in attackedGroups) {\n        const attackedGroup = attackedGroups[direction];\n\n        if (attackedGroup.liberties.length === 0) {\n            stonesToRemove.push.apply(stonesToRemove, attackedGroup.stones);\n        } else if (attackedGroup.stones.length > 0) {\n            survivingAttackedGroups++;\n        }\n    }\n\n    if (survivingAttackedGroups === _.keys(cardinalAdjacencyMap).length) {\n        return existingStones; // the placed stone died\n    }\n\n    for (const coordinate of stonesToRemove) {\n        newStones[coordinate] = FLAGS.STONE_NONE;\n    }\n\n    return newStones;\n};\n\nexport const determineAlteredstones = ({ nextBoardState, currentBoardState }) => {\n    const alteredStones = new Set();\n\n    for (const coordinate in nextBoardState) {\n        if (nextBoardState[coordinate] !== currentBoardState[coordinate]) {\n            alteredStones.add(coordinate);\n        }\n    }\n\n    return alteredStones;\n};\n\nexport const getOffsets = ({ x, y, tileDimensions }) => {\n    const col = Math.floor(x / tileDimensions.width);\n    const row = Math.floor(y / tileDimensions.height);\n\n    return {\n        col,\n        row,\n    };\n};\n\nexport const deriveCoordinatesFromOffsets = (offsets) => {\n    const colCoordinate = UTILS.getCharacterFromOffset(offsets.col);\n    const rowCoordinate = offsets.row + 1;\n\n    return {\n        colCoordinate,\n        rowCoordinate,\n    };\n};","import * as FLAGS from '../../game/flags';\nimport * as ACTIONS from '../constants/actions';\nimport * as GAME_MATHS from \"../../game/maths\";\n\nconst initialState = {\n    boardDimensions: {\n        height: 0,\n        width: 0,\n    },\n    canRender: false,\n    maxOffsets: {\n        col: 8,\n        row: 8,\n    },\n    mode: FLAGS.GAME_9_x_9,\n    tileDimensions: {\n        height: 0,\n        width: 0,\n    },\n    turnColor: FLAGS.TURN_BLACK,\n    turnNumber: 1,\n    windowHeight: null,\n    windowWidth: null,\n    blackCaptures: 0,\n    whiteCaptures: 0,\n    lastPreviewStone: '',\n};\n\nconst getDimensions = ({ mode, windowHeight, windowWidth }) => {\n    const boardDimensions =\n        GAME_MATHS.calculateBoardDimensions({\n            windowHeight,\n            windowWidth,\n        });\n\n    const tileDimensions =\n        GAME_MATHS.calculateTileDimensions({\n            mode,\n            boardHeight: boardDimensions.height,\n            boardWidth: boardDimensions.width,\n        });\n\n    return {\n        boardDimensions,\n        tileDimensions,\n    }\n};\n\nconst game = (state = initialState, action) => {\n    switch (action.type) {\n        case ACTIONS.SET_LAST_PREVIEW_STONE: {\n            return {\n                ...state,\n                lastPreviewStone: action.payload.coordinate,\n            }\n        }\n        case ACTIONS.SET_MODE: {\n            const { mode } = action.payload;\n\n            const {\n                boardDimensions,\n                tileDimensions,\n            } = getDimensions({\n                mode,\n                windowHeight: state.windowHeight,\n                windowWidth: state.windowWidth,\n            });\n\n            let maxOffsets = {\n                col: 8,\n                row: 8,\n            };\n\n            if (mode === FLAGS.GAME_13_x_13) {\n                maxOffsets.col = 12;\n                maxOffsets.row = 12;\n            } else if (mode === FLAGS.GAME_19_x_19) {\n                maxOffsets.col = 18;\n                maxOffsets.row = 18;\n            }\n\n            return {\n                ...state,\n                maxOffsets,\n                mode,\n                boardDimensions,\n                tileDimensions,\n                turnNumber: 1,\n                blackCaptures: 0,\n                whiteCaptures: 0,\n            };\n        } case ACTIONS.UPDATE_STONES:\n            return {\n                ...state,\n                turnColor: state.turnColor === FLAGS.TURN_BLACK ? FLAGS.TURN_WHITE : FLAGS.TURN_BLACK,\n                turnNumber: state.turnNumber + 1,\n            };\n        case ACTIONS.SET_WINDOW_DIMENSIONS: {\n            const {\n                windowHeight,\n                windowWidth,\n            } = action.payload;\n\n            const {\n                boardDimensions,\n                tileDimensions,\n            } = getDimensions({\n                mode: state.mode,\n                windowHeight,\n                windowWidth,\n            });\n\n            return {\n                ...state,\n                boardDimensions,\n                tileDimensions,\n                canRender: true,\n                windowHeight,\n                windowWidth,\n            };\n        } default:\n            return state;\n    }\n};\n\nexport default game;","import * as TYPES from '../constants/actions';\nimport * as FLAGS from '../../game/flags';\nimport * as GAME_MATHS from '../../game/maths';\nimport * as _ from 'lodash';\n\nconst updateStones = ({\n    alteredStones,\n    nextBoardState,\n    placedStone,\n}) => ({\n    type: TYPES.UPDATE_STONES,\n    payload: {\n        alteredStones,\n        nextBoardState,\n        placedStone,\n    },\n});\n\nconst koWarning = (colCoordinate, rowCoordinate, color) => ({\n    type: TYPES.KO_WARNING,\n    payload: {\n        colCoordinate,\n        rowCoordinate,\n        color,\n    }\n});\n\nexport const setStone = ({ colCoordinate, rowCoordinate }) => {\n    return (dispatch, getState) => {\n        const {\n            mode,\n            turnColor,\n        } = getState().game;\n\n        const {\n            currentBoardState,\n            previousBoardState,\n        } = getState().board;\n\n        const color = FLAGS.TURN_BLACK === turnColor ? FLAGS.STONE_BLACK : FLAGS.STONE_WHITE;\n\n        const nextBoardState = GAME_MATHS.removeDeadStones({\n            existingStones: currentBoardState,\n            mode,\n            newStoneColor: color,\n            newStoneColCoordinate: colCoordinate,\n            newStoneRowCoordinate: rowCoordinate,\n        });\n\n        const isKo = _.isEqual(previousBoardState, nextBoardState);\n\n        if (isKo) {\n            dispatch(koWarning(colCoordinate, rowCoordinate, color));\n        } else {\n            // TEST THIS\n            const alteredStones = GAME_MATHS.determineAlteredstones({ currentBoardState, nextBoardState});\n\n            dispatch(updateStones({\n                alteredStones,\n                nextBoardState,\n                placedStone: `${colCoordinate}${rowCoordinate}`,\n            }));\n        }\n    };\n};","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as _ from 'lodash';\nimport * as FLAGS from './game/flags';\nimport * as GAME_MATHS from './game/maths';\nimport * as UTILS from './game/utils';\nimport { setStone } from './store/actions/board';\nimport { setLastPreviewStone } from './store/actions/game';\n\nclass Board extends Component {\n    constructor(props) {\n        super(props);\n        this.onMouseMove = this.onMouseMove.bind(this);\n        this.onMouseOut = this.onMouseOut.bind(this);\n        this.onClick = this.onClick.bind(this);\n        this.calculatePreviewStone = this.calculatePreviewStone.bind(this);\n        // this.calculatePreviewStone = _.throttle(this.calculatePreviewStone.bind(this), 100);\n    }\n\n    componentDidMount() {\n        this.renderWholeBoard();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.mode !== prevProps.mode ||\n            !_.isEqual(this.props.tileDimensions, prevProps.tileDimensions)) {\n            const { boardDimensions } = this.props;\n\n            const canvasContext = this.getCanvasContextPresets();\n            canvasContext.clearRect(0, 0, boardDimensions.width, boardDimensions.height);\n            this.renderWholeBoard();\n        } else if (!_.isEqual(this.props.alteredStones, prevProps.alteredStones)) {\n            for (const coordinate of this.props.alteredStones) {\n                const colCoordinate = coordinate[0];\n                const rowCoordinate = Number.parseInt(coordinate.substring(1));\n                const colOffset = UTILS.getOffsetFromCharacter(colCoordinate);\n                const rowOffset = rowCoordinate - 1;\n                const canvasContext = this.getCanvasContextPresets();\n\n                this.drawTile(colCoordinate, rowCoordinate, canvasContext, colOffset, rowOffset);\n            }\n        }\n    }\n\n    getCoordinates() {\n        const { mode } = this.props;\n\n        console.log(`Current mode ${mode}, tile dims: ${JSON.stringify(this.props.tileDimensions)}`);\n\n        // Yay hardcoding\n        if (mode === FLAGS.GAME_9_x_9) {\n            return FLAGS.GRID_COORDINATES_9_x_9;\n        } else if (mode === FLAGS.GAME_13_x_13) {\n            return FLAGS.GRID_COORDINATES_13_x_13;\n        } else if (mode === FLAGS.GAME_19_x_19) {\n            return FLAGS.GRID_COORDINATES_19_x_19;\n        } else {\n            throw new Error('No known mode selected');\n        }\n    }\n\n    getCanvasContextPresets() {\n        const { isKoViolation } = this.props;\n\n        const canvas = this.refs.canvas;\n        const canvasContext = canvas.getContext('2d');\n        canvasContext.lineWidth = 4; // 4 pixels is a little over a millimeter. Yeah I know mobile yada yada\n\n        if (isKoViolation) {\n            canvasContext.strokeStyle = '#FF0000';\n        }\n\n        return canvasContext;\n    }\n\n    drawTile(colCoordinate, rowCoordinate, canvasContext, colOffset, rowOffset) {\n        const {\n            currentBoardState,\n            mode,\n        } = this.props;\n\n        const stonePlaced = currentBoardState[`${colCoordinate}${rowCoordinate}`];\n\n        if (stonePlaced === FLAGS.STONE_NONE) {\n            this.clearCanvas(canvasContext, colOffset, rowOffset);\n        }\n\n        if (GAME_MATHS.getCornersConstant(mode).includes(`${colCoordinate}${rowCoordinate}`)) {\n            this.drawCorner(colCoordinate, rowCoordinate, canvasContext, colOffset, rowOffset);\n        } else if (GAME_MATHS.getSidesConstant(mode).includes(`${colCoordinate}${rowCoordinate}`)) {\n            this.drawSide(colCoordinate, rowCoordinate, canvasContext, colOffset, rowOffset);\n        } else if (GAME_MATHS.getStarPointsConstant(mode).includes(`${colCoordinate}${rowCoordinate}`)) {\n            this.drawStarPoint(canvasContext, colOffset, rowOffset);\n        } else {\n            this.drawIntersection(canvasContext, colOffset, rowOffset);\n        }\n\n        if (stonePlaced && FLAGS.STONE_NONE !== stonePlaced) {\n            this.drawStone(canvasContext, colOffset, rowOffset, stonePlaced);\n        }\n    }\n\n    drawSide(colCoordinate, rowCoordinate, canvasContext, colOffset, rowOffset) {\n        const {\n            mode,\n            tileDimensions,\n        } = this.props;\n\n        const cardinalDirection = GAME_MATHS.getCardinalDirection(mode, `${colCoordinate}${rowCoordinate}`);\n\n        const min_X = tileDimensions.width * colOffset;\n        const min_Y = tileDimensions.height * rowOffset;\n        const mid_X = min_X + (tileDimensions.width / 2);\n        const mid_Y = min_Y + (tileDimensions.height / 2);\n        const max_X = min_X + tileDimensions.width;\n        const max_Y = min_Y + tileDimensions.height;\n\n        canvasContext.beginPath();\n        canvasContext.font = '18px monospace';\n\n        if (FLAGS.WEST === cardinalDirection) {\n            canvasContext.moveTo(mid_X, min_Y);\n            canvasContext.lineTo(mid_X, max_Y);\n            canvasContext.moveTo(mid_X, mid_Y);\n            canvasContext.lineTo(max_X, mid_Y);\n            canvasContext.fillText(rowCoordinate, min_X, mid_Y + 4);\n        } else if (FLAGS.NORTH === cardinalDirection) {\n            canvasContext.moveTo(min_X, mid_Y);\n            canvasContext.lineTo(max_X, mid_Y);\n            canvasContext.moveTo(mid_X, mid_Y);\n            canvasContext.lineTo(mid_X, max_Y);\n            canvasContext.fillText(colCoordinate, mid_X, 18);\n        } else if (FLAGS.EAST === cardinalDirection) {\n            canvasContext.moveTo(mid_X, min_Y);\n            canvasContext.lineTo(mid_X, max_Y);\n            canvasContext.moveTo(min_X, mid_Y);\n            canvasContext.lineTo(mid_X, mid_Y);\n            canvasContext.fillText(rowCoordinate, max_X - 20, mid_Y + 4);\n        } else if (FLAGS.SOUTH === cardinalDirection) {\n            canvasContext.moveTo(min_X, mid_Y);\n            canvasContext.lineTo(max_X, mid_Y);\n            canvasContext.moveTo(mid_X, min_Y);\n            canvasContext.lineTo(mid_X, mid_Y);\n            canvasContext.fillText(colCoordinate, mid_X, max_Y - 10);\n        }\n\n        canvasContext.stroke();\n    }\n\n    drawCorner(colCoordinate, rowCoordinate, canvasContext, colOffset, rowOffset) {\n        const {\n            mode,\n            tileDimensions,\n        } = this.props;\n\n        const cardinalDirection = GAME_MATHS.getCardinalDirection(mode, `${colCoordinate}${rowCoordinate}`);\n\n        const min_X = tileDimensions.width * colOffset;\n        const min_Y = tileDimensions.height * rowOffset;\n        const mid_X = min_X + (tileDimensions.width / 2);\n        const mid_Y = min_Y + (tileDimensions.height / 2);\n        const max_X = min_X + tileDimensions.width;\n        const max_Y = min_Y + tileDimensions.height;\n\n        canvasContext.beginPath();\n        canvasContext.font = '18px monospace';\n\n        if (FLAGS.NORTH_EAST === cardinalDirection) {\n            canvasContext.moveTo(min_X, mid_Y);\n            canvasContext.lineTo(mid_X, mid_Y);\n            canvasContext.lineTo(mid_X, max_Y);\n            canvasContext.fillText(colCoordinate, mid_X - 4, 18);\n            canvasContext.fillText(rowCoordinate, max_X - 20, mid_Y + 4);\n        } else if (FLAGS.SOUTH_EAST === cardinalDirection) {\n            canvasContext.moveTo(mid_X, min_Y);\n            canvasContext.lineTo(mid_X, mid_Y);\n            canvasContext.lineTo(min_X, mid_Y);\n            canvasContext.fillText(colCoordinate, mid_X - 4, max_Y - 10);\n            canvasContext.fillText(rowCoordinate, max_X - 20, mid_Y);\n        } else if (FLAGS.SOUTH_WEST === cardinalDirection) {\n            canvasContext.moveTo(max_X, mid_Y);\n            canvasContext.lineTo(mid_X, mid_Y);\n            canvasContext.lineTo(mid_X, min_Y);\n            canvasContext.fillText(colCoordinate, mid_X, max_Y - 10);\n            canvasContext.fillText(rowCoordinate, min_X, mid_Y);\n        } else if (FLAGS.NORTH_WEST === cardinalDirection) {\n            canvasContext.moveTo(mid_X, max_Y);\n            canvasContext.lineTo(mid_X, mid_Y);\n            canvasContext.lineTo(max_X, mid_Y);\n            canvasContext.fillText(colCoordinate, mid_X, 18);\n            canvasContext.fillText(rowCoordinate, min_X, mid_Y);\n        }\n\n        canvasContext.stroke();\n    }\n\n    drawIntersection(canvasContext, colOffset, rowOffset) {\n        const { tileDimensions } = this.props;\n\n        const min_X = tileDimensions.width * colOffset;\n        const min_Y = tileDimensions.height * rowOffset;\n        const mid_X = min_X + (tileDimensions.width / 2);\n        const mid_Y = min_Y + (tileDimensions.height / 2);\n        const max_X = min_X + tileDimensions.width;\n        const max_Y = min_Y + tileDimensions.height;\n\n        canvasContext.beginPath();\n        canvasContext.moveTo(min_X, mid_Y);\n        canvasContext.lineTo(max_X, mid_Y);\n        canvasContext.moveTo(mid_X, min_Y);\n        canvasContext.lineTo(mid_X, max_Y);\n        canvasContext.stroke();\n    }\n\n    drawStarPoint(canvasContext, colOffset, rowOffset) {\n        const { tileDimensions } = this.props;\n\n        const min_X = tileDimensions.width * colOffset;\n        const min_Y = tileDimensions.height * rowOffset;\n        const mid_X = min_X + (tileDimensions.width / 2);\n        const mid_Y = min_Y + (tileDimensions.height / 2);\n        const max_X = min_X + tileDimensions.width;\n        const max_Y = min_Y + tileDimensions.height;\n\n        canvasContext.beginPath();\n        canvasContext.arc(mid_X, mid_Y, 5, 0, 2 * Math.PI);\n        canvasContext.fillStyle = '#000000';\n        canvasContext.fill();\n        canvasContext.moveTo(min_X, mid_Y);\n        canvasContext.lineTo(max_X, mid_Y);\n        canvasContext.moveTo(mid_X, min_Y);\n        canvasContext.lineTo(mid_X, max_Y);\n        canvasContext.stroke();\n    }\n\n    drawStone(canvasContext, colOffset, rowOffset, stonePlaced) {\n        this.drawStoneInternal(FLAGS.STONE_BLACK === stonePlaced, canvasContext, colOffset, rowOffset);\n    }\n\n    drawStoneInternal(isBlack, canvasContext, colOffset, rowOffset) {\n        const {\n            stoneRadius,\n            tileDimensions,\n        } = this.props;\n\n        const min_X = tileDimensions.width * colOffset;\n        const min_Y = tileDimensions.height * rowOffset;\n        const mid_X = min_X + (tileDimensions.width / 2);\n        const mid_Y = min_Y + (tileDimensions.height / 2);\n\n        canvasContext.lineWidth = 1; // 4 pixels is a little over a millimeter. Yeah I know mobile yada yada\n\n        canvasContext.beginPath();\n        canvasContext.arc(mid_X, mid_Y, stoneRadius, 0, 2 * Math.PI);\n\n        if (isBlack) {\n            canvasContext.fillStyle = '#000000';\n            canvasContext.fill();\n        } else {\n            canvasContext.fillStyle = '#FFFFFF';\n            canvasContext.fill();\n        }\n\n        canvasContext.stroke();\n    }\n\n    resetLastPreviewStone(canvasContext) {\n        const { lastPreviewStone } = this.props;\n\n        if (lastPreviewStone) {\n            const previousColOffset = UTILS.getOffsetFromCharacter(lastPreviewStone[0]);\n            const previousRowOffset = Number.parseInt(lastPreviewStone.substring(1)) - 1;\n\n            this.clearCanvas(canvasContext, previousColOffset, previousRowOffset);\n            this.drawTile(lastPreviewStone[0], lastPreviewStone.substring(1), canvasContext, previousColOffset, previousRowOffset);\n        }\n    }\n\n    showPreviewStone(colOffset, rowOffset) {\n        const {\n            currentBoardState,\n            lastPreviewStone,\n            setLastPreviewStone,\n            turnColor,\n        } = this.props;\n\n        const canvasContext = this.getCanvasContextPresets();\n\n        const currentColCoordinate = UTILS.getCharacterFromOffset(colOffset);\n        const currentRowCoordinate = rowOffset + 1;\n\n        const coordinate = `${currentColCoordinate}${currentRowCoordinate}`;\n\n        // Don't go through re-render if it's the same stone\n        if (coordinate === lastPreviewStone) {\n            return;\n        }\n\n        // DRY but lame?\n        this.resetLastPreviewStone(canvasContext);\n\n        // Don't render preview stone if a stone is already there\n        if (currentBoardState[coordinate] && currentBoardState[coordinate] !== FLAGS.STONE_NONE) {\n            return;\n        }\n\n        setLastPreviewStone(coordinate);\n        this.drawStoneInternal(FLAGS.TURN_BLACK === turnColor, canvasContext, colOffset, rowOffset);\n    }\n\n    clearCanvas(canvasContext, colOffset, rowOffset) {\n        const { tileDimensions } = this.props;\n\n        const min_X = tileDimensions.width * colOffset;\n        const min_Y = tileDimensions.height * rowOffset;\n\n        canvasContext.clearRect(min_X, min_Y, tileDimensions.width, tileDimensions.height);\n    }\n\n    renderRow(aRow, rowIndex, canvasContext) {\n        const numberCoordinate = aRow[0].substring(1);\n\n        _.forEach(aRow, (aCoordinate, colIndex) => {\n            const letterCoordinate = aCoordinate[0];\n            \n            this.drawTile(letterCoordinate, numberCoordinate, canvasContext, colIndex, rowIndex);\n        });\n    }\n\n    renderWholeBoard() {\n        const coordinates = this.getCoordinates();\n        const canvasContext = this.getCanvasContextPresets();\n\n        _.forEach(coordinates, (aRow, index) => {\n            this.renderRow(aRow, index, canvasContext);\n        });\n    }\n\n    getOffsetsWithinBounds({x, y}) {\n        const {\n            tileDimensions,\n            maxOffsets,\n        } = this.props;\n        const offsets = GAME_MATHS.getOffsets({ x, y, tileDimensions});\n\n        if (offsets.col > maxOffsets.col || offsets.row > maxOffsets.row) {\n            throw new Error(`Offsets out of bounds: ${JSON.stringify(offsets)}, bounds: ${JSON.stringify(maxOffsets)}`);\n        }\n\n        return offsets;\n    }\n\n    calculatePreviewStone(x, y) {\n        let offsets;\n\n        try {\n            offsets = this.getOffsetsWithinBounds({ x, y });\n        } catch (e) {\n            console.log(e);\n            return;\n        }\n\n        this.showPreviewStone(offsets.col, offsets.row);\n    }\n\n    onClick(e) {\n        const {\n            currentBoardState,\n            setStone,\n        } = this.props;\n\n        let offsets;\n\n        try {\n            offsets = this.getOffsetsWithinBounds({\n                x: e.clientX,\n                y: e.clientY,\n            });\n        } catch (e) {\n            console.log(e);\n            return;\n        }\n\n        const coordinates = GAME_MATHS.deriveCoordinatesFromOffsets(offsets);\n        const theCoordinate = `${coordinates.colCoordinate}${coordinates.rowCoordinate}`;\n\n        if (currentBoardState[theCoordinate] && currentBoardState[theCoordinate] !== FLAGS.STONE_NONE) {\n            return;\n        }\n\n        // a little hacky, wutevs\n        setStone({ ...coordinates });\n    }\n\n    onMouseOut() {\n        const canvasContext = this.getCanvasContextPresets();\n\n        // DRY but lame?\n        this.resetLastPreviewStone(canvasContext);\n        this.props.setLastPreviewStone('');\n    }\n\n    onMouseMove(e) {\n        const clientX = e.clientX;\n        const clientY = e.clientY;\n\n        this.calculatePreviewStone(clientX, clientY);\n    }\n\n    // I may have reversed this? https://senseis.xmp.net/?Coordinates\n    render() {\n        const { boardDimensions } = this.props;\n\n        return (\n            <canvas\n                height={boardDimensions.height}\n                width={boardDimensions.width}\n                onMouseMove={this.onMouseMove}\n                onMouseOut={this.onMouseOut}\n                onClick={this.onClick}\n                ref=\"canvas\"\n            />\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    const {\n        mode,\n        boardDimensions,\n        lastPreviewStone,\n        maxOffsets,\n        tileDimensions,\n        turnColor,\n    } = state.game;\n\n    const {\n        alteredStones,\n        currentBoardState,\n        koViolation,\n    } = state.board;\n\n    const stoneRadius = GAME_MATHS.stoneRadius(tileDimensions.height);\n\n    return {\n        alteredStones,\n        currentBoardState,\n        koViolation,\n        lastPreviewStone,\n        maxOffsets,\n        mode,\n        stoneRadius,\n        tileDimensions,\n        boardDimensions,\n        turnColor,\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setStone: ({ colCoordinate, rowCoordinate }) => {\n            dispatch(setStone({ colCoordinate, rowCoordinate }));\n        },\n        setLastPreviewStone: (coordinate) => {\n            dispatch(setLastPreviewStone(coordinate));\n        },\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Board);","import * as TYPES from '../constants/actions';\n\nexport const setMode = mode => ({\n    type: TYPES.SET_MODE,\n    payload: {\n        mode,\n    },\n});\n\nexport const setLastPreviewStone = coordinate => ({\n    type: TYPES.SET_LAST_PREVIEW_STONE,\n    payload: {\n        coordinate,\n    },\n});\n\nexport const setWindowDimensions = (windowWidth, windowHeight) => ({\n    type: TYPES.SET_WINDOW_DIMENSIONS,\n    payload: {\n        windowWidth,\n        windowHeight,\n    },\n});","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as FLAGS from './game/flags';\nimport {\n    setMode,\n} from './store/actions/game';\n\nclass Configuration extends Component {\n    getHumanReadableMode() {\n        const { mode } = this.props;\n\n        if (mode === FLAGS.GAME_9_x_9) {\n            return '9 x 9';\n        } else if (mode === FLAGS.GAME_13_x_13) {\n            return '13 x 13';\n        } else if (mode === FLAGS.GAME_19_x_19) {\n            return '19 x 19';\n        } else {\n            throw new Error('No known mode selected');\n        }\n    }\n\n    render() {\n        const {\n            mode,\n            setMode,\n        } = this.props;\n\n        return (\n            <div id=\"configuration\">\n                <h1>Go Demo Board</h1>\n                <div className=\"flex-container\">\n                    <div>\n                        <h4>Mode: {this.getHumanReadableMode()}</h4>\n                        <h4>Turn Number: {this.props.turnNumber}</h4>\n                    </div>\n                    <form>\n                        <select\n                            onChange={e => setMode(e.target.value)}\n                            value={mode}\n                        >\n                            <option value={FLAGS.GAME_9_x_9}>9 x 9</option>\n                            <option value={FLAGS.GAME_13_x_13}>13 x 13</option>\n                            <option value={FLAGS.GAME_19_x_19}>19 x 19</option>\n                        </select>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        mode: state.game.mode,\n        turnNumber: state.game.turnNumber,\n    };\n};\n\nconst mapDispatchToProps = dispatch => ({\n    setMode: (mode) => {\n        dispatch(setMode(mode))\n    },\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Configuration);","import React, { Component } from 'react';\nimport Board from './Board';\nimport Configuration from './Configuration';\nimport { connect } from 'react-redux';\nimport { setWindowDimensions } from './store/actions/game';\nimport './styles/index.css';\n\nclass App extends Component {\n    // Always seems like garbage when .bind() is used\n    constructor(props) {\n        super(props);\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n    }\n\n    componentDidMount() {\n        this.updateWindowDimensions();\n        window.addEventListener('resize', this.updateWindowDimensions);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateWindowDimensions);\n    }\n\n    updateWindowDimensions() {\n        this.props.setWindowDimensions(window.innerWidth, window.innerHeight);\n    }\n\n    render() {\n        const { canRender } = this.props;\n\n        return (\n            <div className=\"App app-container\">\n                <div className=\"board-container\">\n                    {canRender && <Board/>}\n                    {!canRender && <h1>Please wait...</h1>}\n                </div>\n                <div className=\"configuration-container\">\n                    <Configuration/>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    const {\n        canRender,\n        mode,\n    } = state.game;\n\n    return {\n        mode,\n        canRender,\n    };\n};\n\nconst mapDispatchToProps = dispatch => ({\n    setWindowDimensions: (windowWidth, windowHeight) => {\n        dispatch(setWindowDimensions(windowWidth, windowHeight))\n    },\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// Redux boilerplate\nimport { Provider } from 'react-redux'\nimport configureStore from './store/configureStore'\n\n// More potentially specific imports to this domain\nimport App from './App';\n\n\nconst store = configureStore();\nconst rootElement = document.getElementById('root');\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    rootElement\n);\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport loggerMiddleware from './middleware/logger';\nimport boardReducer from './reducers/board';\nimport gameReducer from './reducers/game';\n\nexport default function configureStore(preloadedState) {\n    const middlewareEnhancer = applyMiddleware(thunkMiddleware, loggerMiddleware);\n\n    const enhancers = [middlewareEnhancer];\n    const composedEnhancers = composeWithDevTools(...enhancers);\n\n    const rootReducer = combineReducers({\n        board: boardReducer,\n        game: gameReducer,\n    });\n\n    return createStore(rootReducer, preloadedState, composedEnhancers);\n}"],"sourceRoot":""}