{"version":3,"sources":["store/middleware/logger.js","game/utils.js","game/flags.js","store/reducers/board.js","store/constants/actions.js","game/maths.js","store/reducers/game.js","store/actions/board.js","store/actions/game.js","Board.js","Configuration.js","game/content.js","CapturesStatus.js","CapturesPanel.js","GameWarning.js","App.js","index.js","store/configureStore.js"],"names":["logger","store","next","action","console","group","type","info","result","log","getState","groupEnd","genGobanCharArray","numColumns","Error","columnLabels","i","length","currentCharacter","String","fromCharCode","push","getCharacterFromOffset","offset","getOffsetFromCharacter","character","originalCharacterCode","charCodeAt","GOBAN_WIDTH_TO_HEIGHT_RATIO","Number","GOBAN_HEIGHT_TO_WIDTH_RATIO","GOBAN_STONE_DIAMETER_TO_TILE_HEIGHT_RATIO","CORNER_ALL_NW","concat","CORNER_9_x_9_NE","CORNER_9_x_9_SE","CORNER_9_x_9_SW","CORNER_13_x_13_NE","CORNER_13_x_13_SE","CORNER_13_x_13_SW","CORNER_19_x_19_NE","CORNER_19_x_19_SE","CORNER_19_x_19_SW","CORNERS_9_x_9","STAR_POINTS_9_x_9","CORNERS_13_x_13","STAR_POINTS_13_x_13","CORNERS_19_x_19","STAR_POINTS_19_x_19","SIDES_9_x_9","Object","toConsumableArray","_","row","UTILS","col","SIDES_13_x_13","SIDES_19_x_19","GRID_COORDINATES_9_x_9","GRID_COORDINATES_13_x_13","GRID_COORDINATES_19_x_19","initialState","alteredStones","Set","mode","currentBoardState","previousBoardState","previousStone","penultimateStone","board","state","arguments","undefined","payload","objectSpread","_action$payload","nextBoardState","placedStone","koViolation","getCardinalDirection","coordinate","FLAGS","substring","getCardinalAdjacencies","_ref3","coordinates","colCoordinate","rowCoordinate","maxIndex","colOffset","rowOffset","parseInt","adjacencies","north","east","south","west","getAdjacentCoordinates","_ref4","boardDimensions","height","width","canRender","capturesPanelHeight","koWarning","suicideWarning","maxOffsets","tileDimensions","turnColor","turnNumber","windowHeight","windowWidth","blackCaptures","whiteCaptures","lastPreviewStone","getDimensions","_ref","workingHeight","workingWidth","desiredWidth","desiredHeight","Math","floor","GAME_MATHS","_ref2","boardHeight","boardWidth","tileRatio","game","_getDimensions","_getDimensions2","_getDimensions3","_action$payload2","setStone","dispatch","_getState$game","_getState$board","color","_ref5","existingStones","newStoneColor","newStoneColCoordinate","newStoneRowCoordinate","opposingColor","newStones","defineProperty","cardinalAdjacencyMap","nextAdjacentCoordinates","adjacentLibertiesOfPlacedStone","sum","direction","attackedGroups","stones","liberties","isCoordinateProcessed","shouldProcessCoordinate","attackedGroup","coordinateToProcess","apply","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","value","aCoordinate","err","return","stonesToRemove","survivingAttackedGroups","totalAttackedGroups","_i","_stonesToRemove","isKo","_ref6","add","delete","incrementCaptures","size","Board","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onMouseMove","bind","assertThisInitialized","onMouseOut","onClick","calculatePreviewStone","renderWholeBoard","prevProps","canvasContext","getCanvasContextPresets","drawTile","clearRect","resetLastPreviewStone","JSON","stringify","refs","canvas","getContext","lineWidth","_this$props","stonePlaced","clearCanvas","includes","drawIntersection","drawStarPoint","drawSide","drawCorner","drawStone","_this$props2","cardinalDirection","min_X","min_Y","mid_X","mid_Y","max_X","max_Y","beginPath","font","moveTo","lineTo","fillText","stroke","_this$props3","arc","PI","fillStyle","fill","drawStoneInternal","isBlack","_this$props4","stoneRadius","previousColOffset","previousRowOffset","_this$props5","setLastPreviewStone","currentColCoordinate","currentRowCoordinate","aRow","rowIndex","_this2","numberCoordinate","colIndex","letterCoordinate","_this3","getCoordinates","index","renderRow","x","y","_this$props6","offsets","_ref7","getOffsetsWithinBounds","e","showPreviewStone","_this$props7","clientX","clientY","theCoordinate","_this$props8","react_default","a","createElement","ref","Component","connect","tileHeight","_state$game","_state$board","Configuration","setMode","id","className","getHumanReadableMode","onChange","target","CapturesStatus","captures","displayColor","ownProps","CapturesPanel","document","getElementById","clientHeight","setCapturePanelHeight","src_CapturesStatus","GameWarning","getWarningClass","getWarningText","App","updateWindowDimensions","window","addEventListener","removeEventListener","setWindowDimensions","innerWidth","innerHeight","resetWarnings","src_CapturesPanel","src_GameWarning","src_Board","src_Configuration","preloadedState","enhancers","applyMiddleware","thunkMiddleware","loggerMiddleware","composedEnhancers","composeWithDevTools","rootReducer","combineReducers","boardReducer","gameReducer","createStore","configureStore","rootElement","ReactDOM","render","es","src_App"],"mappings":"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","file":"static/js/main.99f918f4.chunk.js","sourcesContent":["const logger = store => next => action => {\n    console.group(action.type);\n    console.info('dispatching', action);\n    let result = next(action);\n    console.log('next state', store.getState());\n    console.groupEnd();\n    return result;\n};\n\nexport default logger;","// Skips I, very intelligent\nexport const genGobanCharArray = (numColumns) => {\n    if (numColumns < 1) {\n        throw new Error('Please expect more than one column for a standard board...');\n    }\n\n    let columnLabels = [];\n\n    for (let i = 65; columnLabels.length < numColumns; ++i) {\n        const currentCharacter = String.fromCharCode(i);\n        if ('I' !== currentCharacter) {\n            columnLabels.push(currentCharacter);\n        }\n    }\n\n    return columnLabels;\n};\n\nexport const getCharacterFromOffset = (offset) => {\n    if (offset < 8) {\n        return String.fromCharCode(offset + 65);\n    } else {\n        // accounting for I...\n        return String.fromCharCode(offset + 66);\n    }\n};\n\nexport const getOffsetFromCharacter = (character) => {\n    const originalCharacterCode = character.charCodeAt(0);\n\n    if (originalCharacterCode < 74) {\n        return originalCharacterCode - 65;\n    } else {\n        // this accounts for the 'I' offset\n        return originalCharacterCode - 66;\n    }\n};","import * as _ from 'lodash';\nimport * as UTILS from './utils';\n\n// yeehaw constants and pointers and strings oh my\n\n// Ratios expertly calculated from here\n//https://senseis.xmp.net/?EquipmentDimensions\nexport const GOBAN_WIDTH_TO_HEIGHT_RATIO = Number(1.071428571428571);\nexport const GOBAN_HEIGHT_TO_WIDTH_RATIO = Number(0.933333333333333);\n\n// I made this up\nexport const GOBAN_STONE_DIAMETER_TO_TILE_HEIGHT_RATIO = Number(0.88);\n\nexport const TURN_BLACK = 'TURN_BLACK';\nexport const TURN_WHITE = 'TURN_WHITE';\n\nexport const STONE_NONE = 'STONE_NONE';\nexport const STONE_BLACK = 'STONE_BLACK';\nexport const STONE_WHITE = 'STONE_WHITE';\n\nexport const GAME_9_x_9 = 'GAME_9_x_9';\nexport const GAME_13_x_13 = 'GAME_13_x_13';\nexport const GAME_19_x_19 = 'GAME_19_x_19';\n\nexport const NORTH = 'NORTH';\nexport const NORTH_EAST = 'NORTH_EAST';\nexport const EAST = 'EAST';\nexport const SOUTH_EAST = 'SOUTH_EAST';\nexport const SOUTH = 'SOUTH';\nexport const SOUTH_WEST = 'SOUTH_WEST';\nexport const WEST = 'WEST';\nexport const NORTH_WEST = 'NORTH_WEST';\n\nexport const MIN_COLUMN = 'A';\nexport const MIN_SIDE_COLUMN = 'B';\nexport const MIN_ROW = '1';\n\nexport const MAX_9_x_9_COLUMN = 'J';\nexport const MAX_EASTWARD_9_x_9_COLUMN_FOR_NORTH_SOUTH = 'H';\nexport const MAX_9_x_9_ROW    = '9';\n\nexport const MAX_13_x_13_COLUMN = 'N';\nexport const MAX_EASTWARD_13_x_13_COLUMN_FOR_NORTH_SOUTH = 'L';\nexport const MAX_13_x_13_ROW    = '13';\n\nexport const MAX_19_x_19_COLUMN = 'T';\nexport const MAX_EASTWARD_19_x_19_COLUMN_FOR_NORTH_SOUTH = 'S';\nexport const MAX_19_x_19_ROW    = '19';\n\n// it's always a1 doofus\nexport const CORNER_ALL_NW = `${MIN_COLUMN}${MIN_ROW}`;\n\nexport const CORNER_9_x_9_NE = `${MAX_9_x_9_COLUMN}${MIN_ROW}`;\nexport const CORNER_9_x_9_SE = `${MAX_9_x_9_COLUMN}${MAX_9_x_9_ROW}`;\nexport const CORNER_9_x_9_SW = `${MIN_COLUMN}${MAX_9_x_9_ROW}`;\n\nexport const CORNER_13_x_13_NE = `${MAX_13_x_13_COLUMN}${MIN_ROW}`;\nexport const CORNER_13_x_13_SE = `${MAX_13_x_13_COLUMN}${MAX_13_x_13_ROW}`;\nexport const CORNER_13_x_13_SW = `${MIN_COLUMN}${MAX_13_x_13_ROW}`;\n\nexport const CORNER_19_x_19_NE = `${MAX_19_x_19_COLUMN}${MIN_ROW}`;\nexport const CORNER_19_x_19_SE = `${MAX_19_x_19_COLUMN}${MAX_19_x_19_ROW}`;\nexport const CORNER_19_x_19_SW = `${MIN_COLUMN}${MAX_19_x_19_ROW}`;\n\nexport const CORNERS_9_x_9 = [\n    CORNER_ALL_NW,\n    CORNER_9_x_9_NE,\n    CORNER_9_x_9_SE,\n    CORNER_9_x_9_SW,\n];\n\nexport const STAR_POINTS_9_x_9 = [\n    'C3','G3','E5', 'C7', 'G7',\n];\n\nexport const CORNERS_13_x_13 = [\n    `${MIN_COLUMN}${MIN_ROW}`,\n    `${MIN_COLUMN}${MAX_13_x_13_ROW}`,\n    `${MAX_13_x_13_COLUMN}${MIN_ROW}`,\n    `${MAX_13_x_13_COLUMN}${MAX_13_x_13_ROW}`,\n];\n\nexport const STAR_POINTS_13_x_13 = [\n    'D4','J4','G7', 'J10', 'D10',\n];\n\nexport const CORNERS_19_x_19 = [\n    `${MIN_COLUMN}${MIN_ROW}`,\n    `${MIN_COLUMN}${MAX_19_x_19_ROW}`,\n    `${MAX_19_x_19_COLUMN}${MIN_ROW}`,\n    `${MAX_19_x_19_COLUMN}${MAX_19_x_19_ROW}`,\n];\n\nexport const STAR_POINTS_19_x_19 = [\n    'D4', 'D10', 'D16', 'J4', 'J10', 'J16', 'P4', 'P10', 'P16',\n];\n\nexport const SIDES_9_x_9 = [\n    ..._.map(_.range(2, 9), row => `${MIN_COLUMN}${row}`),\n    ..._.map(_.range(2, 9), row => `${MAX_9_x_9_COLUMN}${row}`),\n    ..._.map(UTILS.genGobanCharArray(8), col => `${col}9`),\n    ..._.map(UTILS.genGobanCharArray(8), col => `${col}1`),\n];\n\nexport const SIDES_13_x_13 = [\n    ..._.map(_.range(2, 13), row => `${MIN_COLUMN}${row}`),\n    ..._.map(_.range(2, 13), row => `${MAX_13_x_13_COLUMN}${row}`),\n    ..._.map(UTILS.genGobanCharArray(12), col => `${col}13`),\n    ..._.map(UTILS.genGobanCharArray(12), col => `${col}1`),\n];\n\nexport const SIDES_19_x_19 = [\n    ..._.map(_.range(2, 19), row => `${MIN_COLUMN}${row}`),\n    ..._.map(_.range(2, 19), row => `${MAX_19_x_19_COLUMN}${row}`),\n    ..._.map(UTILS.genGobanCharArray(18), col => `${col}19`),\n    ..._.map(UTILS.genGobanCharArray(18), col => `${col}1`),\n];\n\nexport const GRID_COORDINATES_9_x_9 =\n    _.map(_.range(1, 10), row => {\n        return _.map(UTILS.genGobanCharArray(9), col => `${col}${row}`);\n    })\n;\n\nexport const GRID_COORDINATES_13_x_13 =\n    _.map(_.range(1, 14), row => {\n        return _.map(UTILS.genGobanCharArray(13), col => `${col}${row}`);\n    })\n;\n\nexport const GRID_COORDINATES_19_x_19 =\n    _.map(_.range(1, 20), row => {\n        return _.map(UTILS.genGobanCharArray(19), col => `${col}${row}`);\n    })\n;","import * as FLAGS from '../../game/flags';\nimport * as TYPES from '../constants/actions';\n\n// This maintains a map of coordinates as keys to placed stones.\n// the state is somewhat dynamic but predictable based on the\n// generally agreed upon goban coordinates\nconst initialState = {\n    alteredStones: new Set(),\n    mode: FLAGS.GAME_9_x_9,\n    currentBoardState: {},\n    previousBoardState: {},\n    previousStone: '',\n    penultimateStone: '', // means 'second to last', quite literally\n};\n\nconst board = (state = initialState, action) => {\n    switch (action.type) {\n        case TYPES.SET_MODE:\n            const { mode } = action.payload;\n\n            return {\n                ...initialState,\n                mode,\n            };\n        case TYPES.UPDATE_STONES:\n            const {\n                alteredStones,\n                nextBoardState,\n                placedStone,\n            } = action.payload;\n\n            // ALTERED STONES GOES TO GAME MATHS\n            return {\n                ...state,\n                alteredStones,\n                koViolation: '',\n                currentBoardState: nextBoardState,\n                previousBoardState: state.currentBoardState,\n                penultimateStone: state.previousStone,\n                previousStone: placedStone,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default board;","export const KO_WARNING = 'KO_WARNING';\nexport const SUICIDE_WARNING = 'SUICIDE_WARNING';\nexport const RESET_WARNINGS = 'RESET_WARNINGS';\nexport const SET_MODE = 'SET_MODE';\nexport const SET_LAST_PREVIEW_STONE = 'SET_LAST_PREVIEW_STONE';\nexport const UPDATE_STONES = 'UPDATE_STONES';\nexport const SET_WINDOW_DIMENSIONS = 'SET_WINDOW_DIMENSIONS';\nexport const SET_CAPTURE_PANEL_HEIGHT = 'SET_CAPTURE_PANEL_HEIGHT';\nexport const INCREMENT_CAPTURES = 'INCREMENT_CAPTURES';","import * as _ from 'lodash';\nimport * as FLAGS from './flags';\nimport * as UTILS from \"./utils\";\n\nexport const getCornersConstant = (mode) => {\n    if (FLAGS.GAME_9_x_9 === mode) {\n        return FLAGS.CORNERS_9_x_9;\n    } else if (FLAGS.GAME_13_x_13 === mode) {\n        return FLAGS.CORNERS_13_x_13;\n    } else if (FLAGS.GAME_19_x_19 === mode) {\n        return FLAGS.CORNERS_19_x_19;\n    }\n};\n\nexport const getSidesConstant = (mode) => {\n    if (FLAGS.GAME_9_x_9 === mode) {\n        return FLAGS.SIDES_9_x_9;\n    } else if (FLAGS.GAME_13_x_13 === mode) {\n        return FLAGS.SIDES_13_x_13;\n    } else if (FLAGS.GAME_19_x_19 === mode) {\n        return FLAGS.SIDES_19_x_19;\n    }\n};\n\nexport const getStarPointsConstant = (mode) => {\n    if (FLAGS.GAME_9_x_9 === mode) {\n        return FLAGS.STAR_POINTS_9_x_9;\n    } else if (FLAGS.GAME_13_x_13 === mode) {\n        return FLAGS.STAR_POINTS_13_x_13;\n    } else if (FLAGS.GAME_19_x_19 === mode) {\n        return FLAGS.STAR_POINTS_19_x_19;\n    }\n};\n\nexport const getCardinalDirection = (mode, coordinate) => {\n    if (FLAGS.CORNER_ALL_NW === coordinate) {\n        return FLAGS.NORTH_WEST;\n    } \n    \n    if (FLAGS.GAME_9_x_9 === mode) {\n        if (FLAGS.CORNER_9_x_9_SW === coordinate) {\n            return FLAGS.SOUTH_WEST;\n        } else if (FLAGS.CORNER_9_x_9_NE === coordinate) {\n            return FLAGS.NORTH_EAST;\n        } else if (FLAGS.CORNER_9_x_9_SE === coordinate) {\n            return FLAGS.SOUTH_EAST;\n        } else { // let me die I made these so cumbersome\n            if (FLAGS.MIN_COLUMN === coordinate[0]) {\n                return FLAGS.WEST;\n            } else if (FLAGS.MIN_ROW === coordinate.substring(1)) {\n                return FLAGS.NORTH;\n            } else if (FLAGS.MAX_9_x_9_COLUMN === coordinate[0]) {\n                return FLAGS.EAST;\n            } else if (FLAGS.MAX_9_x_9_ROW === coordinate.substring(1)) {\n                return FLAGS.SOUTH;\n            }\n        }\n\n        throw new Error(`Avast ye matey, shouldn'nt be branching to this island in mode [${mode}], coordinate [${coordinate}]`);\n    }\n\n    if (FLAGS.GAME_13_x_13 === mode) {\n        if (FLAGS.CORNER_13_x_13_SW === coordinate) {\n            return FLAGS.SOUTH_WEST;\n        } else if (FLAGS.CORNER_13_x_13_NE === coordinate) {\n            return FLAGS.NORTH_EAST;\n        } else if (FLAGS.CORNER_13_x_13_SE === coordinate) {\n            return FLAGS.SOUTH_EAST;\n        } else { // let me die I made these so cumbersome\n            if (FLAGS.MIN_COLUMN === coordinate[0]) {\n                return FLAGS.WEST;\n            } else if (FLAGS.MIN_ROW === coordinate.substring(1)) {\n                return FLAGS.NORTH;\n            } else if (FLAGS.MAX_13_x_13_COLUMN === coordinate[0]) {\n                return FLAGS.EAST;\n            } else if (FLAGS.MAX_13_x_13_ROW === coordinate.substring(1)) {\n                return FLAGS.SOUTH;\n            }\n        }\n\n        throw new Error(`Avast ye matey, shouldn'nt be branching to this island in mode [${mode}], coordinate [${coordinate}]`);\n    }\n\n    if (FLAGS.GAME_19_x_19 === mode) {\n        if (FLAGS.CORNER_19_x_19_SW === coordinate) {\n            return FLAGS.SOUTH_WEST;\n        } else if (FLAGS.CORNER_19_x_19_NE === coordinate) {\n            return FLAGS.NORTH_EAST;\n        } else if (FLAGS.CORNER_19_x_19_SE === coordinate) {\n            return FLAGS.SOUTH_EAST;\n        } else { // let me die I made these so cumbersome\n            if (FLAGS.MIN_COLUMN === coordinate[0]) {\n                return FLAGS.WEST;\n            } else if (FLAGS.MIN_ROW === coordinate.substring(1)) {\n                return FLAGS.NORTH;\n            } else if (FLAGS.MAX_19_x_19_COLUMN === coordinate[0]) {\n                return FLAGS.EAST;\n            } else if (FLAGS.MAX_19_x_19_ROW === coordinate.substring(1)) {\n                return FLAGS.SOUTH;\n            }\n        }\n\n        throw new Error(`Avast ye matey, shouldn'nt be branching to this island in mode [${mode}], coordinate [${coordinate}]`);\n    }    \n};\n\n// Calculates how much space the board can have on the screen\nexport const calculateBoardDimensions = ({\n    workingHeight,\n    workingWidth,\n}) => {\n    let desiredWidth = workingHeight * FLAGS.GOBAN_HEIGHT_TO_WIDTH_RATIO;\n    desiredWidth = workingWidth > desiredWidth ? desiredWidth : workingWidth - 10; // very scientific\n    const desiredHeight = desiredWidth * FLAGS.GOBAN_WIDTH_TO_HEIGHT_RATIO;\n\n    return {\n        height: Math.floor(desiredHeight),\n        width: Math.floor(desiredWidth),\n    };\n};\n\n//https://senseis.xmp.net/?EquipmentDimensions\n// This function determines the width and height of each renderable tile.\n// corners and sides will get an additional padding for aesthetic.\nexport const calculateTileDimensions = ({\n                                     mode,\n                                     boardHeight,\n                                     boardWidth,\n                                 }) => {\n    let tileRatio = 0;\n\n    if (FLAGS.GAME_9_x_9 === mode) {\n        tileRatio = Number(1/9);\n    } else if (FLAGS.GAME_13_x_13 === mode) {\n        tileRatio = Number(1/13);\n    } else if (FLAGS.GAME_19_x_19 === mode) {\n        tileRatio = Number(1/19);\n    } else {\n        throw new Error('No known mode');\n    }\n    \n    const height = Math.floor(boardHeight * tileRatio);\n    const width = Math.floor(boardWidth * tileRatio);\n\n    // Otherwise these calculations will cause lines to be drawn outside\n    // the bounding canvas\n    return {\n        height: height % 2 === 0 ? height : height - 1,\n        width: width % 2 === 0 ? width : width - 1,\n    };\n};\n\nexport const stoneRadius = (tileHeight) => {\n    return Math.floor((tileHeight * FLAGS.GOBAN_STONE_DIAMETER_TO_TILE_HEIGHT_RATIO) / 2);\n};\n\nexport const getCardinalAdjacencies = ({\n    mode,\n    colCoordinate,\n    rowCoordinate,\n}) => {\n    let coordinates;\n\n    if (FLAGS.GAME_9_x_9 === mode) {\n        coordinates = FLAGS.GRID_COORDINATES_9_x_9;\n    } else if (FLAGS.GAME_13_x_13 === mode) {\n        coordinates = FLAGS.GRID_COORDINATES_13_x_13;\n    } else if (FLAGS.GAME_19_x_19 === mode) {\n        coordinates = FLAGS.GRID_COORDINATES_19_x_19;\n    }\n\n    const maxIndex = coordinates.length - 1;\n\n    // 'A' is ASCII 65\n    const colOffset = UTILS.getOffsetFromCharacter(colCoordinate);\n    const rowOffset = parseInt(rowCoordinate) - 1; // 0 indexed, dummy\n\n    const adjacencies = {};\n\n    if (rowOffset >= 1) {\n        adjacencies.north = coordinates[rowOffset - 1][colOffset];\n    }\n\n    if (colOffset < maxIndex) {\n        adjacencies.east = coordinates[rowOffset][colOffset + 1];\n    }\n\n    if (rowOffset < maxIndex) {\n        adjacencies.south = coordinates[rowOffset + 1][colOffset];\n    }\n\n    if (colOffset >= 1) {\n        adjacencies.west = coordinates[rowOffset][colOffset - 1];\n    }\n\n    return adjacencies;\n};\n\nexport const getAdjacentCoordinates = ({\n   mode,\n   colCoordinate,\n   rowCoordinate,\n}) => _.values(getCardinalAdjacencies({\n    mode,\n    colCoordinate,\n    rowCoordinate,\n}));\n\n// get adjacent stones of opposing color\n// get all connected stones in that opposing color group\n// determine if any of those connected stones have any liberties\n// return board state with dead groups removed\n// TODO: this can't be 100 lines long...\n\nexport const removeDeadStones = ({\n    existingStones,\n    mode,\n    newStoneColor,\n    newStoneColCoordinate,\n    newStoneRowCoordinate,\n}) => {\n    const opposingColor = FLAGS.STONE_BLACK === newStoneColor ? FLAGS.STONE_WHITE : FLAGS.STONE_BLACK;\n    const newStones = _.assign({}, existingStones, { [`${newStoneColCoordinate}${newStoneRowCoordinate}`]: newStoneColor });\n\n    // this will make sense in a few lines.. maybe\n    let cardinalAdjacencyMap = getCardinalAdjacencies({\n        mode,\n        colCoordinate: newStoneColCoordinate,\n        rowCoordinate: newStoneRowCoordinate,\n    });\n\n    let nextAdjacentCoordinates = [];\n    const adjacentLibertiesOfPlacedStone = _.reduce(cardinalAdjacencyMap, (sum, coordinate, direction) => {\n        if (newStones[coordinate] && newStones[coordinate] !== FLAGS.STONE_NONE) {\n            return sum;\n        }\n\n        return sum + 1;\n    }, 0);\n\n    // Need to track the attacked groups separately to ensure proper removal\n    const attackedGroups = {\n        north: {\n            stones: [],\n            liberties: [],\n        },\n        east: {\n            stones: [],\n            liberties: [],\n        },\n        south: {\n            stones: [],\n            liberties: [],\n        },\n        west: {\n            stones: [],\n            liberties: [],\n        },\n    };\n\n    const isCoordinateProcessed = (coordinate) => {\n        for (const direction in attackedGroups) {\n            if (_.includes(attackedGroups[direction].stones, coordinate)) {\n                return true;\n            }\n        }\n\n        return false;\n    };\n\n    const shouldProcessCoordinate = (coordinate) => {\n        if (isCoordinateProcessed(coordinate)) {\n            return false;\n        }\n\n        if (newStones[coordinate] === opposingColor) {\n            return true;\n        }\n\n        return false;\n    };\n\n    for (const direction in cardinalAdjacencyMap) {\n        const coordinate = cardinalAdjacencyMap[direction];\n        const attackedGroup = attackedGroups[direction];\n\n        // For a while I forgot to process the initial coordinate. Smart.\n        if (shouldProcessCoordinate(coordinate)) {\n            nextAdjacentCoordinates.push(coordinate);\n            attackedGroup.stones.push(coordinate);\n        }\n\n        do {\n            // ... get adjacent allied stones and ones not already part of the group\n            nextAdjacentCoordinates = _.flatMap(nextAdjacentCoordinates, (coordinateToProcess) =>\n                _.filter(getAdjacentCoordinates({\n                    mode,\n                    colCoordinate: coordinateToProcess[0],\n                    rowCoordinate: coordinateToProcess.substring(1),\n                }), shouldProcessCoordinate)\n            );\n\n            attackedGroup.stones.push.apply(attackedGroup.stones, nextAdjacentCoordinates);\n        } while (nextAdjacentCoordinates.length !== 0);\n    }\n\n    for (const direction in attackedGroups) {\n        const attackedGroup = attackedGroups[direction];\n\n        for (const coordinateToProcess of attackedGroup.stones) {\n            nextAdjacentCoordinates = _.filter(getAdjacentCoordinates({\n                mode,\n                colCoordinate: coordinateToProcess[0],\n                rowCoordinate: coordinateToProcess.substring(1),\n            }), aCoordinate => !isCoordinateProcessed(aCoordinate)\n                && (!newStones[aCoordinate] || newStones[aCoordinate] === FLAGS.STONE_NONE));\n\n            attackedGroup.liberties.push.apply(attackedGroup.liberties, nextAdjacentCoordinates);\n        }\n    }\n\n    const stonesToRemove = [];\n    let survivingAttackedGroups = 0;\n    let totalAttackedGroups = 0;\n\n    for (const direction in attackedGroups) {\n        const attackedGroup = attackedGroups[direction];\n\n        if (attackedGroup.stones.length > 0) {\n            totalAttackedGroups++;\n        }\n\n        if (attackedGroup.liberties.length === 0) {\n            stonesToRemove.push.apply(stonesToRemove, attackedGroup.stones);\n        } else if (attackedGroup.stones.length > 0) {\n            survivingAttackedGroups++;\n        }\n    }\n\n    // if (survivingAttackedGroups === _.keys(cardinalAdjacencyMap).length) {\n    if (adjacentLibertiesOfPlacedStone === 0\n        && survivingAttackedGroups > 0\n        && survivingAttackedGroups === totalAttackedGroups) {\n        return existingStones; // the placed stone died\n    }\n\n    for (const coordinate of stonesToRemove) {\n        newStones[coordinate] = FLAGS.STONE_NONE;\n    }\n\n    return newStones;\n};\n\nexport const determineAlteredstones = ({ nextBoardState, currentBoardState }) => {\n    const alteredStones = new Set();\n\n    for (const coordinate in nextBoardState) {\n        if (nextBoardState[coordinate] !== currentBoardState[coordinate]) {\n            alteredStones.add(coordinate);\n        }\n    }\n\n    return alteredStones;\n};\n\nexport const getOffsets = ({ x, y, tileDimensions }) => {\n    const col = Math.floor(x / tileDimensions.width);\n    const row = Math.floor(y / tileDimensions.height);\n\n    return {\n        col,\n        row,\n    };\n};\n\nexport const deriveCoordinatesFromOffsets = (offsets) => {\n    const colCoordinate = UTILS.getCharacterFromOffset(offsets.col);\n    const rowCoordinate = offsets.row + 1;\n\n    return {\n        colCoordinate,\n        rowCoordinate,\n    };\n};","import * as FLAGS from '../../game/flags';\nimport * as TYPES from '../constants/actions';\nimport * as GAME_MATHS from \"../../game/maths\";\n\nconst initialState = {\n    boardDimensions: {\n        height: 0,\n        width: 0,\n    },\n    canRender: false,\n    capturesPanelHeight: null,\n    koWarning: false,\n    suicideWarning: false,\n    maxOffsets: {\n        col: 8,\n        row: 8,\n    },\n    mode: FLAGS.GAME_9_x_9,\n    tileDimensions: {\n        height: 0,\n        width: 0,\n    },\n    turnColor: FLAGS.TURN_BLACK,\n    turnNumber: 1,\n    windowHeight: null,\n    windowWidth: null,\n    blackCaptures: 0,\n    whiteCaptures: 0,\n    lastPreviewStone: '',\n};\n\nconst getDimensions = ({\n    capturesPanelHeight,\n    mode,\n    windowHeight,\n    windowWidth,\n}) => {\n    const boardDimensions =\n        GAME_MATHS.calculateBoardDimensions({\n            workingHeight: windowHeight - capturesPanelHeight,\n            workingWidth: windowWidth,\n        });\n\n    const tileDimensions =\n        GAME_MATHS.calculateTileDimensions({\n            mode,\n            boardHeight: boardDimensions.height,\n            boardWidth: boardDimensions.width,\n        });\n\n    return {\n        boardDimensions,\n        tileDimensions,\n    }\n};\n\nconst game = (state = initialState, action) => {\n    switch (action.type) {\n        case TYPES.SET_LAST_PREVIEW_STONE: {\n            return {\n                ...state,\n                lastPreviewStone: action.payload.coordinate,\n            }\n        }\n        case TYPES.SET_MODE: {\n            const { mode } = action.payload;\n            const {\n                capturesPanelHeight,\n                windowHeight,\n                windowWidth,\n            } = state;\n\n            const {\n                boardDimensions,\n                tileDimensions,\n            } = getDimensions({\n                capturesPanelHeight,\n                mode,\n                windowHeight,\n                windowWidth,\n            });\n\n            let maxOffsets = {\n                col: 8,\n                row: 8,\n            };\n\n            if (mode === FLAGS.GAME_13_x_13) {\n                maxOffsets.col = 12;\n                maxOffsets.row = 12;\n            } else if (mode === FLAGS.GAME_19_x_19) {\n                maxOffsets.col = 18;\n                maxOffsets.row = 18;\n            }\n\n            return {\n                ...state,\n                maxOffsets,\n                mode,\n                boardDimensions,\n                tileDimensions,\n                turnNumber: 1,\n                blackCaptures: 0,\n                whiteCaptures: 0,\n            };\n        } case TYPES.UPDATE_STONES:\n            return {\n                ...state,\n                turnColor: state.turnColor === FLAGS.TURN_BLACK ? FLAGS.TURN_WHITE : FLAGS.TURN_BLACK,\n                turnNumber: state.turnNumber + 1,\n            };\n        case TYPES.SET_WINDOW_DIMENSIONS: {\n            const {\n                windowHeight,\n                windowWidth,\n            } = action.payload;\n\n            const {\n                capturesPanelHeight,\n                mode,\n            } = state;\n\n            if (state.capturesPanelHeight) {\n                const {\n                    boardDimensions,\n                    tileDimensions,\n                } = getDimensions({\n                    capturesPanelHeight,\n                    mode,\n                    windowHeight,\n                    windowWidth,\n                });\n\n                return {\n                    ...state,\n                    boardDimensions,\n                    tileDimensions,\n                    canRender: true,\n                    windowHeight,\n                    windowWidth,\n                };\n            }\n\n            return {\n                ...state,\n                windowHeight,\n                windowWidth,\n            };\n        } case TYPES.SET_CAPTURE_PANEL_HEIGHT: {\n            const {\n                mode,\n                windowHeight,\n                windowWidth,\n            } = state;\n\n            const { capturesPanelHeight } = action.payload;\n\n            if (windowHeight && windowWidth) {\n                const {\n                    boardDimensions,\n                    tileDimensions,\n                } = getDimensions({\n                    capturesPanelHeight,\n                    mode,\n                    windowHeight,\n                    windowWidth,\n                });\n\n                return {\n                    ...state,\n                    boardDimensions,\n                    capturesPanelHeight,\n                    tileDimensions,\n                    canRender: true,\n                };\n            }\n\n            return {\n                ...state,\n                capturesPanelHeight,\n            };\n        }\n        case TYPES.INCREMENT_CAPTURES: {\n            const {\n                blackCaptures,\n                whiteCaptures,\n            } = action.payload;\n            \n            return {\n                ...state,\n                blackCaptures: state.blackCaptures + blackCaptures,\n                whiteCaptures: state.whiteCaptures + whiteCaptures,\n            }\n        }\n        case TYPES.KO_WARNING:\n            return {\n                ...state,\n                koWarning: true,\n            };\n        case TYPES.SUICIDE_WARNING:\n            return {\n                ...state,\n                suicideWarning: true,\n            };\n        case TYPES.RESET_WARNINGS:\n            return {\n                ...state,\n                koWarning: false,\n                suicideWarning: false,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default game;","import * as _ from 'lodash';\nimport * as TYPES from '../constants/actions';\nimport * as FLAGS from '../../game/flags';\nimport * as GAME_MATHS from '../../game/maths';\nimport {\n    incrementCaptures,\n    koWarning,\n    suicideWarning,\n} from '../actions/game';\n\nconst updateStones = ({\n    alteredStones,\n    nextBoardState,\n    placedStone,\n}) => ({\n    type: TYPES.UPDATE_STONES,\n    payload: {\n        alteredStones,\n        nextBoardState,\n        placedStone,\n    },\n});\n\nexport const setStone = ({ colCoordinate, rowCoordinate }) => {\n    return (dispatch, getState) => {\n        const {\n            mode,\n            turnColor,\n        } = getState().game;\n\n        const {\n            currentBoardState,\n            previousBoardState,\n        } = getState().board;\n\n        const color = FLAGS.TURN_BLACK === turnColor ? FLAGS.STONE_BLACK : FLAGS.STONE_WHITE;\n\n        const nextBoardState = GAME_MATHS.removeDeadStones({\n            existingStones: currentBoardState,\n            mode,\n            newStoneColor: color,\n            newStoneColCoordinate: colCoordinate,\n            newStoneRowCoordinate: rowCoordinate,\n        });\n\n        const isKo = _.isEqual(previousBoardState, nextBoardState);\n        const isSuicide = _.isEqual(currentBoardState, nextBoardState);\n\n\n        if (isSuicide) {\n            dispatch(suicideWarning());\n        } else if (isKo) {\n            dispatch(koWarning());\n        } else {\n            const alteredStones = GAME_MATHS.determineAlteredstones({ currentBoardState, nextBoardState});\n            const placedStone = `${colCoordinate}${rowCoordinate}`;\n\n            dispatch(updateStones({\n                alteredStones,\n                nextBoardState,\n                placedStone,\n            }));\n\n            alteredStones.delete(placedStone);\n\n            dispatch(incrementCaptures({\n                blackCaptures: color === FLAGS.STONE_BLACK ? alteredStones.size : 0,\n                whiteCaptures: color === FLAGS.STONE_WHITE ? alteredStones.size : 0,\n            }));\n        }\n    };\n};","import * as TYPES from '../constants/actions';\n\nexport const setMode = mode => ({\n    type: TYPES.SET_MODE,\n    payload: {\n        mode,\n    },\n});\n\nexport const setLastPreviewStone = coordinate => ({\n    type: TYPES.SET_LAST_PREVIEW_STONE,\n    payload: {\n        coordinate,\n    },\n});\n\nexport const setWindowDimensions = (windowWidth, windowHeight) => ({\n    type: TYPES.SET_WINDOW_DIMENSIONS,\n    payload: {\n        windowWidth,\n        windowHeight,\n    },\n});\n\nexport const setCapturePanelHeight = (capturesPanelHeight) => ({\n    type: TYPES.SET_CAPTURE_PANEL_HEIGHT,\n    payload: {\n        capturesPanelHeight,\n    },\n});\n\nexport const incrementCaptures = ({ blackCaptures, whiteCaptures }) => ({\n   type: TYPES.INCREMENT_CAPTURES,\n   payload: {\n       blackCaptures,\n       whiteCaptures,\n   }\n});\n\nexport const koWarning = () => ({\n    type: TYPES.KO_WARNING,\n});\n\nexport const suicideWarning = () => ({\n    type: TYPES.SUICIDE_WARNING,\n});\n\nexport const resetWarnings = () => ({\n    type: TYPES.RESET_WARNINGS,\n});","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as _ from 'lodash';\nimport * as FLAGS from './game/flags';\nimport * as GAME_MATHS from './game/maths';\nimport * as UTILS from './game/utils';\nimport { setStone } from './store/actions/board';\nimport { setLastPreviewStone } from './store/actions/game';\n\nclass Board extends Component {\n    constructor(props) {\n        super(props);\n        this.onMouseMove = this.onMouseMove.bind(this);\n        this.onMouseOut = this.onMouseOut.bind(this);\n        this.onClick = this.onClick.bind(this);\n        this.calculatePreviewStone = this.calculatePreviewStone.bind(this);\n        // this.calculatePreviewStone = _.throttle(this.calculatePreviewStone.bind(this), 100);\n    }\n\n    componentDidMount() {\n        this.renderWholeBoard();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.mode !== prevProps.mode ||\n            !_.isEqual(this.props.tileDimensions, prevProps.tileDimensions)) {\n            const { boardDimensions } = this.props;\n\n            const canvasContext = this.getCanvasContextPresets();\n            canvasContext.clearRect(0, 0, boardDimensions.width, boardDimensions.height);\n            this.renderWholeBoard();\n        } else if (!_.isEqual(this.props.alteredStones, prevProps.alteredStones)) {\n            for (const coordinate of this.props.alteredStones) {\n                const colCoordinate = coordinate[0];\n                const rowCoordinate = Number.parseInt(coordinate.substring(1));\n                const colOffset = UTILS.getOffsetFromCharacter(colCoordinate);\n                const rowOffset = rowCoordinate - 1;\n                const canvasContext = this.getCanvasContextPresets();\n\n                this.drawTile(colCoordinate, rowCoordinate, canvasContext, colOffset, rowOffset);\n            }\n        }\n\n        if (this.props.koWarning || this.props.suicideWarning) {\n            this.resetLastPreviewStone(this.getCanvasContextPresets());\n        }\n    }\n\n    getCoordinates() {\n        const { mode } = this.props;\n\n        console.log(`Current mode ${mode}, tile dims: ${JSON.stringify(this.props.tileDimensions)}`);\n\n        // Yay hardcoding\n        if (mode === FLAGS.GAME_9_x_9) {\n            return FLAGS.GRID_COORDINATES_9_x_9;\n        } else if (mode === FLAGS.GAME_13_x_13) {\n            return FLAGS.GRID_COORDINATES_13_x_13;\n        } else if (mode === FLAGS.GAME_19_x_19) {\n            return FLAGS.GRID_COORDINATES_19_x_19;\n        } else {\n            throw new Error('No known mode selected');\n        }\n    }\n\n    getCanvasContextPresets() {\n        const canvas = this.refs.canvas;\n        const canvasContext = canvas.getContext('2d');\n        canvasContext.lineWidth = 4; // 4 pixels is a little over a millimeter. Yeah I know mobile yada yada\n\n        return canvasContext;\n    }\n\n    drawTile(colCoordinate, rowCoordinate, canvasContext, colOffset, rowOffset) {\n        const {\n            currentBoardState,\n            mode,\n        } = this.props;\n\n        const stonePlaced = currentBoardState[`${colCoordinate}${rowCoordinate}`];\n\n        if (stonePlaced === FLAGS.STONE_NONE) {\n            this.clearCanvas(canvasContext, colOffset, rowOffset);\n        }\n\n        if (GAME_MATHS.getCornersConstant(mode).includes(`${colCoordinate}${rowCoordinate}`)) {\n            this.drawCorner(colCoordinate, rowCoordinate, canvasContext, colOffset, rowOffset);\n        } else if (GAME_MATHS.getSidesConstant(mode).includes(`${colCoordinate}${rowCoordinate}`)) {\n            this.drawSide(colCoordinate, rowCoordinate, canvasContext, colOffset, rowOffset);\n        } else if (GAME_MATHS.getStarPointsConstant(mode).includes(`${colCoordinate}${rowCoordinate}`)) {\n            this.drawStarPoint(canvasContext, colOffset, rowOffset);\n        } else {\n            this.drawIntersection(canvasContext, colOffset, rowOffset);\n        }\n\n        if (stonePlaced && FLAGS.STONE_NONE !== stonePlaced) {\n            this.drawStone(canvasContext, colOffset, rowOffset, stonePlaced);\n        }\n    }\n\n    drawSide(colCoordinate, rowCoordinate, canvasContext, colOffset, rowOffset) {\n        const {\n            mode,\n            tileDimensions,\n        } = this.props;\n\n        const cardinalDirection = GAME_MATHS.getCardinalDirection(mode, `${colCoordinate}${rowCoordinate}`);\n\n        const min_X = tileDimensions.width * colOffset;\n        const min_Y = tileDimensions.height * rowOffset;\n        const mid_X = min_X + (tileDimensions.width / 2);\n        const mid_Y = min_Y + (tileDimensions.height / 2);\n        const max_X = min_X + tileDimensions.width;\n        const max_Y = min_Y + tileDimensions.height;\n\n        canvasContext.beginPath();\n        canvasContext.font = '18px monospace';\n\n        if (FLAGS.WEST === cardinalDirection) {\n            canvasContext.moveTo(mid_X, min_Y);\n            canvasContext.lineTo(mid_X, max_Y);\n            canvasContext.moveTo(mid_X, mid_Y);\n            canvasContext.lineTo(max_X, mid_Y);\n            canvasContext.fillText(rowCoordinate, min_X, mid_Y + 4);\n        } else if (FLAGS.NORTH === cardinalDirection) {\n            canvasContext.moveTo(min_X, mid_Y);\n            canvasContext.lineTo(max_X, mid_Y);\n            canvasContext.moveTo(mid_X, mid_Y);\n            canvasContext.lineTo(mid_X, max_Y);\n            canvasContext.fillText(colCoordinate, mid_X, 18);\n        } else if (FLAGS.EAST === cardinalDirection) {\n            canvasContext.moveTo(mid_X, min_Y);\n            canvasContext.lineTo(mid_X, max_Y);\n            canvasContext.moveTo(min_X, mid_Y);\n            canvasContext.lineTo(mid_X, mid_Y);\n            canvasContext.fillText(rowCoordinate, max_X - 20, mid_Y + 4);\n        } else if (FLAGS.SOUTH === cardinalDirection) {\n            canvasContext.moveTo(min_X, mid_Y);\n            canvasContext.lineTo(max_X, mid_Y);\n            canvasContext.moveTo(mid_X, min_Y);\n            canvasContext.lineTo(mid_X, mid_Y);\n            canvasContext.fillText(colCoordinate, mid_X, max_Y - 10);\n        }\n\n        canvasContext.stroke();\n    }\n\n    drawCorner(colCoordinate, rowCoordinate, canvasContext, colOffset, rowOffset) {\n        const {\n            mode,\n            tileDimensions,\n        } = this.props;\n\n        const cardinalDirection = GAME_MATHS.getCardinalDirection(mode, `${colCoordinate}${rowCoordinate}`);\n\n        const min_X = tileDimensions.width * colOffset;\n        const min_Y = tileDimensions.height * rowOffset;\n        const mid_X = min_X + (tileDimensions.width / 2);\n        const mid_Y = min_Y + (tileDimensions.height / 2);\n        const max_X = min_X + tileDimensions.width;\n        const max_Y = min_Y + tileDimensions.height;\n\n        canvasContext.beginPath();\n        canvasContext.font = '18px monospace';\n\n        if (FLAGS.NORTH_EAST === cardinalDirection) {\n            canvasContext.moveTo(min_X, mid_Y);\n            canvasContext.lineTo(mid_X, mid_Y);\n            canvasContext.lineTo(mid_X, max_Y);\n            canvasContext.fillText(colCoordinate, mid_X - 4, 18);\n            canvasContext.fillText(rowCoordinate, max_X - 20, mid_Y + 4);\n        } else if (FLAGS.SOUTH_EAST === cardinalDirection) {\n            canvasContext.moveTo(mid_X, min_Y);\n            canvasContext.lineTo(mid_X, mid_Y);\n            canvasContext.lineTo(min_X, mid_Y);\n            canvasContext.fillText(colCoordinate, mid_X - 4, max_Y - 10);\n            canvasContext.fillText(rowCoordinate, max_X - 20, mid_Y);\n        } else if (FLAGS.SOUTH_WEST === cardinalDirection) {\n            canvasContext.moveTo(max_X, mid_Y);\n            canvasContext.lineTo(mid_X, mid_Y);\n            canvasContext.lineTo(mid_X, min_Y);\n            canvasContext.fillText(colCoordinate, mid_X, max_Y - 10);\n            canvasContext.fillText(rowCoordinate, min_X, mid_Y);\n        } else if (FLAGS.NORTH_WEST === cardinalDirection) {\n            canvasContext.moveTo(mid_X, max_Y);\n            canvasContext.lineTo(mid_X, mid_Y);\n            canvasContext.lineTo(max_X, mid_Y);\n            canvasContext.fillText(colCoordinate, mid_X, 18);\n            canvasContext.fillText(rowCoordinate, min_X, mid_Y);\n        }\n\n        canvasContext.stroke();\n    }\n\n    drawIntersection(canvasContext, colOffset, rowOffset) {\n        const { tileDimensions } = this.props;\n\n        const min_X = tileDimensions.width * colOffset;\n        const min_Y = tileDimensions.height * rowOffset;\n        const mid_X = min_X + (tileDimensions.width / 2);\n        const mid_Y = min_Y + (tileDimensions.height / 2);\n        const max_X = min_X + tileDimensions.width;\n        const max_Y = min_Y + tileDimensions.height;\n\n        canvasContext.beginPath();\n        canvasContext.moveTo(min_X, mid_Y);\n        canvasContext.lineTo(max_X, mid_Y);\n        canvasContext.moveTo(mid_X, min_Y);\n        canvasContext.lineTo(mid_X, max_Y);\n        canvasContext.stroke();\n    }\n\n    drawStarPoint(canvasContext, colOffset, rowOffset) {\n        const { tileDimensions } = this.props;\n\n        const min_X = tileDimensions.width * colOffset;\n        const min_Y = tileDimensions.height * rowOffset;\n        const mid_X = min_X + (tileDimensions.width / 2);\n        const mid_Y = min_Y + (tileDimensions.height / 2);\n        const max_X = min_X + tileDimensions.width;\n        const max_Y = min_Y + tileDimensions.height;\n\n        canvasContext.beginPath();\n        canvasContext.arc(mid_X, mid_Y, 5, 0, 2 * Math.PI);\n        canvasContext.fillStyle = '#000000';\n        canvasContext.fill();\n        canvasContext.moveTo(min_X, mid_Y);\n        canvasContext.lineTo(max_X, mid_Y);\n        canvasContext.moveTo(mid_X, min_Y);\n        canvasContext.lineTo(mid_X, max_Y);\n        canvasContext.stroke();\n    }\n\n    drawStone(canvasContext, colOffset, rowOffset, stonePlaced) {\n        this.drawStoneInternal(FLAGS.STONE_BLACK === stonePlaced, canvasContext, colOffset, rowOffset);\n    }\n\n    drawStoneInternal(isBlack, canvasContext, colOffset, rowOffset) {\n        const {\n            stoneRadius,\n            tileDimensions,\n        } = this.props;\n\n        const min_X = tileDimensions.width * colOffset;\n        const min_Y = tileDimensions.height * rowOffset;\n        const mid_X = min_X + (tileDimensions.width / 2);\n        const mid_Y = min_Y + (tileDimensions.height / 2);\n\n        canvasContext.lineWidth = 1; // 4 pixels is a little over a millimeter. Yeah I know mobile yada yada\n\n        canvasContext.beginPath();\n        canvasContext.arc(mid_X, mid_Y, stoneRadius, 0, 2 * Math.PI);\n\n        if (isBlack) {\n            canvasContext.fillStyle = '#000000';\n            canvasContext.fill();\n        } else {\n            canvasContext.fillStyle = '#FFFFFF';\n            canvasContext.fill();\n        }\n\n        canvasContext.stroke();\n    }\n\n    resetLastPreviewStone(canvasContext) {\n        const { lastPreviewStone } = this.props;\n\n        if (lastPreviewStone) {\n            const previousColOffset = UTILS.getOffsetFromCharacter(lastPreviewStone[0]);\n            const previousRowOffset = Number.parseInt(lastPreviewStone.substring(1)) - 1;\n\n            this.clearCanvas(canvasContext, previousColOffset, previousRowOffset);\n            this.drawTile(lastPreviewStone[0], lastPreviewStone.substring(1), canvasContext, previousColOffset, previousRowOffset);\n        }\n    }\n\n    showPreviewStone(colOffset, rowOffset) {\n        const {\n            currentBoardState,\n            lastPreviewStone,\n            setLastPreviewStone,\n            turnColor,\n        } = this.props;\n\n        const canvasContext = this.getCanvasContextPresets();\n\n        const currentColCoordinate = UTILS.getCharacterFromOffset(colOffset);\n        const currentRowCoordinate = rowOffset + 1;\n\n        const coordinate = `${currentColCoordinate}${currentRowCoordinate}`;\n\n        // Don't go through re-render if it's the same stone\n        if (coordinate === lastPreviewStone) {\n            return;\n        }\n\n        // DRY but lame?\n        this.resetLastPreviewStone(canvasContext);\n\n        // Don't render preview stone if a stone is already there\n        if (currentBoardState[coordinate] && currentBoardState[coordinate] !== FLAGS.STONE_NONE) {\n            return;\n        }\n\n        setLastPreviewStone(coordinate);\n        this.drawStoneInternal(FLAGS.TURN_BLACK === turnColor, canvasContext, colOffset, rowOffset);\n    }\n\n    clearCanvas(canvasContext, colOffset, rowOffset) {\n        const { tileDimensions } = this.props;\n\n        const min_X = tileDimensions.width * colOffset;\n        const min_Y = tileDimensions.height * rowOffset;\n\n        canvasContext.clearRect(min_X, min_Y, tileDimensions.width, tileDimensions.height);\n    }\n\n    renderRow(aRow, rowIndex, canvasContext) {\n        const numberCoordinate = aRow[0].substring(1);\n\n        _.forEach(aRow, (aCoordinate, colIndex) => {\n            const letterCoordinate = aCoordinate[0];\n            \n            this.drawTile(letterCoordinate, numberCoordinate, canvasContext, colIndex, rowIndex);\n        });\n    }\n\n    renderWholeBoard() {\n        const coordinates = this.getCoordinates();\n        const canvasContext = this.getCanvasContextPresets();\n\n        _.forEach(coordinates, (aRow, index) => {\n            this.renderRow(aRow, index, canvasContext);\n        });\n    }\n\n    getOffsetsWithinBounds({x, y}) {\n        const {\n            tileDimensions,\n            maxOffsets,\n        } = this.props;\n        const offsets = GAME_MATHS.getOffsets({ x, y, tileDimensions});\n\n        if (offsets.col > maxOffsets.col || offsets.row > maxOffsets.row) {\n            throw new Error(`Offsets out of bounds: ${JSON.stringify(offsets)}, bounds: ${JSON.stringify(maxOffsets)}`);\n        }\n\n        return offsets;\n    }\n\n    calculatePreviewStone(x, y) {\n        let offsets;\n\n        try {\n            offsets = this.getOffsetsWithinBounds({ x, y });\n        } catch (e) {\n            console.log(e);\n            return;\n        }\n\n        this.showPreviewStone(offsets.col, offsets.row);\n    }\n\n    onClick(e) {\n        const {\n            currentBoardState,\n            setStone,\n            koWarning,\n            suicideWarning,\n        } = this.props;\n\n        if (koWarning || suicideWarning) {\n            return;\n        }\n\n        let offsets;\n\n        try {\n            offsets = this.getOffsetsWithinBounds({\n                x: e.clientX,\n                y: e.clientY - this.props.capturesPanelHeight,\n            });\n        } catch (e) {\n            console.log(e);\n            return;\n        }\n\n        const coordinates = GAME_MATHS.deriveCoordinatesFromOffsets(offsets);\n        const theCoordinate = `${coordinates.colCoordinate}${coordinates.rowCoordinate}`;\n\n        if (currentBoardState[theCoordinate] && currentBoardState[theCoordinate] !== FLAGS.STONE_NONE) {\n            return;\n        }\n\n        // a little hacky, wutevs\n        setStone({ ...coordinates });\n    }\n\n    onMouseOut() {\n        const canvasContext = this.getCanvasContextPresets();\n\n        // DRY but lame?\n        this.resetLastPreviewStone(canvasContext);\n        this.props.setLastPreviewStone('');\n    }\n\n    onMouseMove(e) {\n        const {\n            koWarning,\n            suicideWarning,\n        } = this.props;\n\n        if (koWarning || suicideWarning) {\n            return;\n        }\n\n        const clientX = e.clientX;\n        const clientY = e.clientY;\n\n        this.calculatePreviewStone(clientX, clientY - this.props.capturesPanelHeight);\n    }\n\n    // I may have reversed this? https://senseis.xmp.net/?Coordinates\n    render() {\n        const { boardDimensions } = this.props;\n\n        return (\n            <canvas\n                height={boardDimensions.height}\n                width={boardDimensions.width}\n                onMouseMove={this.onMouseMove}\n                onMouseOut={this.onMouseOut}\n                onClick={this.onClick}\n                ref=\"canvas\"\n            />\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    const {\n        boardDimensions,\n        capturesPanelHeight,\n        lastPreviewStone,\n        maxOffsets,\n        mode,\n        tileDimensions,\n        turnColor,\n        koWarning,\n        suicideWarning,\n    } = state.game;\n\n    const {\n        alteredStones,\n        currentBoardState,\n    } = state.board;\n\n    const stoneRadius = GAME_MATHS.stoneRadius(tileDimensions.height);\n\n    return {\n        alteredStones,\n        capturesPanelHeight,\n        currentBoardState,\n        lastPreviewStone,\n        maxOffsets,\n        mode,\n        stoneRadius,\n        tileDimensions,\n        boardDimensions,\n        turnColor,\n        koWarning,\n        suicideWarning,\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setStone: ({ colCoordinate, rowCoordinate }) => {\n            dispatch(setStone({ colCoordinate, rowCoordinate }));\n        },\n        setLastPreviewStone: (coordinate) => {\n            dispatch(setLastPreviewStone(coordinate));\n        },\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Board);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as FLAGS from './game/flags';\nimport * as CONTENT from './game/content';\nimport {\n    setMode,\n} from './store/actions/game';\n\nclass Configuration extends Component {\n    getHumanReadableMode() {\n        const { mode } = this.props;\n\n        if (mode === FLAGS.GAME_9_x_9) {\n            return CONTENT.MODE_9_x_9;\n        } else if (mode === FLAGS.GAME_13_x_13) {\n            return CONTENT.MODE_13_x_13;\n        } else if (mode === FLAGS.GAME_19_x_19) {\n            return CONTENT.MODE_19_x_19;\n        } else {\n            throw new Error('No known mode selected');\n        }\n    }\n\n    render() {\n        const {\n            mode,\n            setMode,\n        } = this.props;\n\n        return (\n            <div id=\"configuration\">\n                <h1>Go Demo Board</h1>\n                <div className=\"flex-container\">\n                    <div>\n                        <h4>Mode: {this.getHumanReadableMode()}</h4>\n                        <h4>Turn Number: {this.props.turnNumber}</h4>\n                    </div>\n                    <form>\n                        <select\n                            onChange={e => setMode(e.target.value)}\n                            value={mode}\n                        >\n                            <option value={FLAGS.GAME_9_x_9}>{CONTENT.MODE_9_x_9}</option>\n                            <option value={FLAGS.GAME_13_x_13}>{CONTENT.MODE_13_x_13}</option>\n                            <option value={FLAGS.GAME_19_x_19}>{CONTENT.MODE_19_x_19}</option>\n                        </select>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        mode: state.game.mode,\n        turnNumber: state.game.turnNumber,\n    };\n};\n\nconst mapDispatchToProps = dispatch => ({\n    setMode: (mode) => {\n        dispatch(setMode(mode))\n    },\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Configuration);","export const WHITE = 'White';\nexport const BLACK = 'Black';\n\nexport const MODE_9_x_9 = '9 x 9';\nexport const MODE_13_x_13 = '13 x 13';\nexport const MODE_19_x_19  = '19 x 19';\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport * as FLAGS from './game/flags';\nimport * as CONTENT from './game/content';\n\nclass CapturesStatus extends Component {\n    render() {\n        const {\n            captures,\n            displayColor,\n        } = this.props;\n\n        return (\n            <div className=\"captures-status\">\n                <h1>{displayColor} captures - {captures}</h1>\n            </div>\n        );\n    }\n}\n\n// TODO: enforce explicit values\nCapturesStatus.propTypes = {\n    displayColor: PropTypes.string.isRequired,\n    captures: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state, ownProps) => {\n    const {\n        blackCaptures,\n        whiteCaptures,\n    } = state.game;\n\n    const { color } = ownProps;\n    const isBlack = color === FLAGS.STONE_BLACK;\n\n    return {\n        captures: isBlack ? blackCaptures : whiteCaptures,\n        displayColor: isBlack ? CONTENT.BLACK : CONTENT.WHITE,\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n)(CapturesStatus);","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport CapturesStatus from './CapturesStatus';\nimport * as FLAGS from './game/flags';\nimport { setCapturePanelHeight } from './store/actions/game';\n\nclass CapturesPanel extends Component {\n    componentDidMount() {\n        const capturesPanelHeight = document.getElementById('captures-panel').clientHeight;\n        this.props.setCapturePanelHeight(capturesPanelHeight);\n    }\n\n    render() {\n        return (\n            <div\n                className=\"flex-container\"\n                id=\"captures-panel\"\n            >\n                <CapturesStatus color={FLAGS.STONE_BLACK} />\n                <CapturesStatus color={FLAGS.STONE_WHITE} />\n            </div>\n        );\n    }\n}\n\nCapturesPanel.propTypes = {\n    setCapturePanelHeight: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = dispatch => ({\n    setCapturePanelHeight: (capturesPanelHeight) => {\n        dispatch(setCapturePanelHeight(capturesPanelHeight));\n    },\n});\n\nexport default connect(\n    null,\n    mapDispatchToProps,\n)(CapturesPanel);","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nclass GameWarning extends Component {\n    getWarningClass() {\n        const {\n            koWarning,\n            suicideWarning,\n        } = this.props;\n\n        if (koWarning || suicideWarning) {\n            return 'game-warning';\n        }\n\n        return '';\n    }\n\n    getWarningText() {\n        const {\n            koWarning,\n            suicideWarning,\n        } = this.props;\n\n        if (koWarning) {\n            return 'Move violates Ko rule!';\n        }\n\n        if (suicideWarning) {\n            return 'Move is suicidal!';\n        }\n\n        return '';\n    }\n\n    render() {\n        return (\n            <div className={this.getWarningClass()}>\n                <h1>{this.getWarningText()}</h1>\n            </div>\n        );\n    }\n}\n\n// TODO: enforce explicit values\nGameWarning.propTypes = {\n    koWarning: PropTypes.bool.isRequired,\n    suicideWarning: PropTypes.bool.isRequired,\n};\n\nconst mapStateToProps = (state) => {\n    const {\n        koWarning,\n        suicideWarning,\n    } = state.game;\n\n    return {\n        koWarning,\n        suicideWarning,\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n)(GameWarning);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {\n    resetWarnings,\n    setWindowDimensions,\n} from './store/actions/game';\nimport Board from './Board';\nimport Configuration from './Configuration';\nimport './styles/index.css';\nimport CapturesPanel from './CapturesPanel';\nimport GameWarning from './GameWarning';\n\nclass App extends Component {\n    // Always seems like garbage when .bind() is used\n    constructor(props) {\n        super(props);\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n        this.onClick = this.onClick.bind(this);\n    }\n\n    componentDidMount() {\n        this.updateWindowDimensions();\n        window.addEventListener('resize', this.updateWindowDimensions);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateWindowDimensions);\n    }\n\n    updateWindowDimensions() {\n        this.props.setWindowDimensions(window.innerWidth, window.innerHeight);\n    }\n\n    onClick() {\n        const {\n            koWarning,\n            suicideWarning,\n            resetWarnings,\n        } = this.props;\n\n        if (koWarning || suicideWarning) {\n            resetWarnings();\n        }\n    }\n\n    render() {\n        const { canRender } = this.props;\n\n        return (\n            <main onClick={this.onClick}>\n                <CapturesPanel />\n                <GameWarning />\n                <div className=\"App flex-wrap-container\">\n                    <div className=\"board-container\">\n                        {canRender && <Board/>}\n                        {!canRender && <h1>Please wait...</h1>}\n                    </div>\n                    <div className=\"configuration-container\">\n                        <Configuration/>\n                    </div>\n                </div>\n            </main>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    const {\n        canRender,\n        mode,\n        koWarning,\n        suicideWarning,\n    } = state.game;\n\n    return {\n        mode,\n        canRender,\n        koWarning,\n        suicideWarning,\n    };\n};\n\nconst mapDispatchToProps = dispatch => ({\n    resetWarnings: () => {\n        dispatch(resetWarnings());\n    },\n    setWindowDimensions: (windowWidth, windowHeight) => {\n        dispatch(setWindowDimensions(windowWidth, windowHeight))\n    },\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// Redux boilerplate\nimport { Provider } from 'react-redux'\nimport configureStore from './store/configureStore'\n\n// More potentially specific imports to this domain\nimport App from './App';\n\n\nconst store = configureStore();\nconst rootElement = document.getElementById('root');\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    rootElement\n);\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport loggerMiddleware from './middleware/logger';\nimport boardReducer from './reducers/board';\nimport gameReducer from './reducers/game';\n\nexport default function configureStore(preloadedState) {\n    const middlewareEnhancer = applyMiddleware(thunkMiddleware, loggerMiddleware);\n\n    const enhancers = [middlewareEnhancer];\n    const composedEnhancers = composeWithDevTools(...enhancers);\n\n    const rootReducer = combineReducers({\n        board: boardReducer,\n        game: gameReducer,\n    });\n\n    return createStore(rootReducer, preloadedState, composedEnhancers);\n}"],"sourceRoot":""}