{"version":3,"sources":["store/middleware/logger.js","game/utils.js","game/flags.js","game/maths.js","store/reducers/board.js","store/constants/actions.js","store/reducers/game.js","store/selectors/board.js","Tile.js","store/actions/board.js","Board.js","Configuration.js","store/actions/game.js","App.js","index.js","store/configureStore.js"],"names":["logger","store","next","action","console","group","type","info","result","log","getState","groupEnd","genCharArray","charA","charZ","a","i","charCodeAt","j","push","String","fromCharCode","length","Error","concat","GOBAN_WIDTH_TO_HEIGHT_RATIO","Number","GOBAN_HEIGHT_TO_WIDTH_RATIO","GOBAN_STONE_DIAMETER_TO_TILE_HEIGHT_RATIO","CORNER_ALL_NW","CORNER_9_x_9_NE","CORNER_9_x_9_SE","CORNER_9_x_9_SW","CORNER_13_x_13_NE","CORNER_13_x_13_SE","CORNER_13_x_13_SW","CORNER_19_x_19_NE","CORNER_19_x_19_SE","CORNER_19_x_19_SW","CORNERS_9_x_9","STAR_POINTS_9_x_9","CORNERS_13_x_13","STAR_POINTS_13_x_13","CORNERS_19_x_19","STAR_POINTS_19_x_19","SIDES_9_x_9","Object","toConsumableArray","_","row","UTILS","col","SIDES_13_x_13","SIDES_19_x_19","GRID_COORDINATES_9_x_9","GRID_COORDINATES_13_x_13","GRID_COORDINATES_19_x_19","getCardinalDirection","mode","coordinate","FLAGS","substring","getCardinalAdjacencies","_ref3","coordinates","colCoordinate","rowCoordinate","maxIndex","colIndex","parseInt","rowIndex","adjacencies","north","east","south","west","getAdjacentCoordinates","_ref4","initialState","koWarning","currentBoardState","previousBoardState","board","state","arguments","undefined","payload","objectSpread","_action$payload","color","nextBoardState","_ref5","existingStones","newStoneColor","newStoneColCoordinate","newStoneRowCoordinate","opposingColor","newStones","defineProperty","cardinalAdjacencyMap","nextAdjacentCoordinates","attackedGroups","stones","liberties","isCoordinateProcessed","direction","shouldProcessCoordinate","attackedGroup","coordinateToProcess","apply","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","value","aCoordinate","err","return","stonesToRemove","survivingAttackedGroups","GAME_MATHS","canRender","turnColor","turnNumber","windowHeight","windowWidth","blackCaptures","whiteCaptures","game","placedStoneSelector","createSelector","props","placedStoneAtCoordinate","Tile","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","showPreviewStone","bind","assertThisInitialized","clearCanvas","drawTile","onClick","onMouseOver","onMouseOut","ctx","refs","canvas","getContext","lineWidth","_this$props","stonePlaced","drawStone","includes","drawIntersection","drawStarPoint","drawSide","drawCorner","_this$props2","height","width","getCanvasContextPresets","cardinalDirection","midX","midY","beginPath","font","moveTo","lineTo","fillText","stroke","_this$props3","_this$props4","_this$props5","arc","Math","PI","fillStyle","fill","drawStoneInternal","isBlack","_this$props6","stoneRadius","_this$props7","clearRect","setStone","_this$props8","react_default","createElement","ref","Component","connect","ownProps","dispatch","setStoneInternal","Board","aRow","tileDimensions","numberCoordinate","key","className","letterCoordinate","src_Tile","getCoordinates","id","renderRow","tileHeight","_state$game","boardDimensions","_ref","desiredWidth","desiredHeight","floor","_ref2","boardHeight","boardWidth","tileRatio","Configuration","setMode","getHumanReadableMode","onChange","e","target","App","updateWindowDimensions","window","addEventListener","removeEventListener","setWindowDimensions","innerWidth","innerHeight","src_Board","src_Configuration","preloadedState","enhancers","applyMiddleware","thunkMiddleware","loggerMiddleware","composedEnhancers","composeWithDevTools","rootReducer","combineReducers","boardReducer","gameReducer","createStore","configureStore","rootElement","document","getElementById","ReactDOM","render","es","src_App"],"mappings":"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","file":"static/js/main.0a597488.chunk.js","sourcesContent":["const logger = store => next => action => {\n    console.group(action.type);\n    console.info('dispatching', action);\n    let result = next(action);\n    console.log('next state', store.getState());\n    console.groupEnd();\n    return result;\n};\n\nexport default logger;","export const genCharArray = (charA, charZ) => {\n    let a = [], i = charA.charCodeAt(0), j = charZ.charCodeAt(0);\n\n    for (; i <= j; ++i) {\n        a.push(String.fromCharCode(i));\n    }\n\n    if (a.length === 0) {\n        throw new Error(`Unexpected begin [${charA}] and end [${charZ}] characters`);\n    }\n\n    return a;\n};","import * as _ from 'lodash';\nimport * as UTILS from './utils';\n\n// yeehaw constants and pointers and strings oh my\n\n// Ratios expertly calculated from here\n//https://senseis.xmp.net/?EquipmentDimensions\nexport const GOBAN_WIDTH_TO_HEIGHT_RATIO = Number(1.071428571428571);\nexport const GOBAN_HEIGHT_TO_WIDTH_RATIO = Number(0.933333333333333);\n\n// I made this up\nexport const GOBAN_STONE_DIAMETER_TO_TILE_HEIGHT_RATIO = Number(0.88);\n\nexport const TURN_BLACK = 'TURN_BLACK';\nexport const TURN_WHITE = 'TURN_WHITE';\n\nexport const STONE_NONE = 'STONE_NONE';\nexport const STONE_BLACK = 'STONE_BLACK';\nexport const STONE_WHITE = 'STONE_WHITE';\n\nexport const GAME_9_x_9 = 'GAME_9_x_9';\nexport const GAME_13_x_13 = 'GAME_13_x_13';\nexport const GAME_19_x_19 = 'GAME_19_x_19';\n\nexport const NORTH = 'NORTH';\nexport const NORTH_EAST = 'NORTH_EAST';\nexport const EAST = 'EAST';\nexport const SOUTH_EAST = 'SOUTH_EAST';\nexport const SOUTH = 'SOUTH';\nexport const SOUTH_WEST = 'SOUTH_WEST';\nexport const WEST = 'WEST';\nexport const NORTH_WEST = 'NORTH_WEST';\n\nexport const MIN_COLUMN = 'a';\nexport const MIN_SIDE_COLUMN = 'b';\nexport const MIN_ROW = '1';\n\nexport const MAX_9_x_9_COLUMN = 'i';\nexport const MAX_EASTWARD_9_x_9_COLUMN_FOR_NORTH_SOUTH = 'h';\nexport const MAX_9_x_9_ROW    = '9';\n\nexport const MAX_13_x_13_COLUMN = 'm';\nexport const MAX_EASTWARD_13_x_13_COLUMN_FOR_NORTH_SOUTH = 'l';\nexport const MAX_13_x_13_ROW    = '13';\n\nexport const MAX_19_x_19_COLUMN = 's';\nexport const MAX_EASTWARD_19_x_19_COLUMN_FOR_NORTH_SOUTH = 'r';\nexport const MAX_19_x_19_ROW    = '19';\n\n// it's always a1 doofus\nexport const CORNER_ALL_NW = `${MIN_COLUMN}${MIN_ROW}`;\n\nexport const CORNER_9_x_9_NE = `${MAX_9_x_9_COLUMN}${MIN_ROW}`;\nexport const CORNER_9_x_9_SE = `${MAX_9_x_9_COLUMN}${MAX_9_x_9_ROW}`;\nexport const CORNER_9_x_9_SW = `${MIN_COLUMN}${MAX_9_x_9_ROW}`;\n\nexport const CORNER_13_x_13_NE = `${MAX_13_x_13_COLUMN}${MIN_ROW}`;\nexport const CORNER_13_x_13_SE = `${MAX_13_x_13_COLUMN}${MAX_13_x_13_ROW}`;\nexport const CORNER_13_x_13_SW = `${MIN_COLUMN}${MAX_13_x_13_ROW}`;\n\nexport const CORNER_19_x_19_NE = `${MAX_19_x_19_COLUMN}${MIN_ROW}`;\nexport const CORNER_19_x_19_SE = `${MAX_19_x_19_COLUMN}${MAX_19_x_19_ROW}`;\nexport const CORNER_19_x_19_SW = `${MIN_COLUMN}${MAX_19_x_19_ROW}`;\n\nexport const CORNERS_9_x_9 = [\n    CORNER_ALL_NW,\n    CORNER_9_x_9_NE,\n    CORNER_9_x_9_SE,\n    CORNER_9_x_9_SW,\n];\n\nexport const STAR_POINTS_9_x_9 = [\n    'c3','g3','e5', 'c7', 'g7',\n];\n\nexport const CORNERS_13_x_13 = [\n    `${MIN_COLUMN}${MIN_ROW}`,\n    `${MIN_COLUMN}${MAX_13_x_13_ROW}`,\n    `${MAX_13_x_13_COLUMN}${MIN_ROW}`,\n    `${MAX_13_x_13_COLUMN}${MAX_13_x_13_ROW}`,\n];\n\nexport const STAR_POINTS_13_x_13 = [\n    'd4','j4','g7', 'j10', 'd10',\n];\n\nexport const CORNERS_19_x_19 = [\n    `${MIN_COLUMN}${MIN_ROW}`,\n    `${MIN_COLUMN}${MAX_19_x_19_ROW}`,\n    `${MAX_19_x_19_COLUMN}${MIN_ROW}`,\n    `${MAX_19_x_19_COLUMN}${MAX_19_x_19_ROW}`,\n];\n\nexport const STAR_POINTS_19_x_19 = [\n    'd4', 'd10', 'd16', 'j4', 'j10', 'j16', 'p4', 'p10', 'p16',\n];\n\nexport const SIDES_9_x_9 = [\n    ..._.map(_.range(2, 9), row => `${MIN_COLUMN}${row}`),\n    ..._.map(_.range(2, 9), row => `${MAX_9_x_9_COLUMN}${row}`),\n    ..._.map(UTILS.genCharArray(MIN_SIDE_COLUMN, MAX_EASTWARD_9_x_9_COLUMN_FOR_NORTH_SOUTH), col => `${col}9`),\n    ..._.map(UTILS.genCharArray(MIN_SIDE_COLUMN, MAX_EASTWARD_9_x_9_COLUMN_FOR_NORTH_SOUTH), col => `${col}1`),\n];\n\nexport const SIDES_13_x_13 = [\n    ..._.map(_.range(2, 13), row => `${MIN_COLUMN}${row}`),\n    ..._.map(_.range(2, 13), row => `${MAX_13_x_13_COLUMN}${row}`),\n    ..._.map(UTILS.genCharArray(MIN_SIDE_COLUMN, MAX_EASTWARD_13_x_13_COLUMN_FOR_NORTH_SOUTH), col => `${col}13`),\n    ..._.map(UTILS.genCharArray(MIN_SIDE_COLUMN, MAX_EASTWARD_13_x_13_COLUMN_FOR_NORTH_SOUTH), col => `${col}1`),\n];\n\nexport const SIDES_19_x_19 = [\n    ..._.map(_.range(2, 19), row => `${MIN_COLUMN}${row}`),\n    ..._.map(_.range(2, 19), row => `${MAX_19_x_19_COLUMN}${row}`),\n    ..._.map(UTILS.genCharArray(MIN_SIDE_COLUMN, MAX_EASTWARD_19_x_19_COLUMN_FOR_NORTH_SOUTH), col => `${col}19`),\n    ..._.map(UTILS.genCharArray(MIN_SIDE_COLUMN, MAX_EASTWARD_19_x_19_COLUMN_FOR_NORTH_SOUTH), col => `${col}1`),\n];\n\nexport const GRID_COORDINATES_9_x_9 =\n    _.map(_.range(1, 10), row => {\n        return _.map(UTILS.genCharArray(MIN_COLUMN, MAX_9_x_9_COLUMN), col => `${col}${row}`);\n    })\n;\n\nexport const GRID_COORDINATES_13_x_13 =\n    _.map(_.range(1, 14), row => {\n        return _.map(UTILS.genCharArray(MIN_COLUMN, MAX_13_x_13_COLUMN), col => `${col}${row}`);\n    })\n;\n\nexport const GRID_COORDINATES_19_x_19 =\n    _.map(_.range(1, 20), row => {\n        return _.map(UTILS.genCharArray(MIN_COLUMN, MAX_19_x_19_COLUMN), col => `${col}${row}`);\n    })\n;","import * as _ from 'lodash';\nimport * as FLAGS from './flags';\n\nexport const getCornersConstant = (mode) => {\n    if (FLAGS.GAME_9_x_9 === mode) {\n        return FLAGS.CORNERS_9_x_9;\n    } else if (FLAGS.GAME_13_x_13 === mode) {\n        return FLAGS.CORNERS_13_x_13;\n    } else if (FLAGS.GAME_19_x_19 === mode) {\n        return FLAGS.CORNERS_19_x_19;\n    }\n};\n\nexport const getSidesConstant = (mode) => {\n    if (FLAGS.GAME_9_x_9 === mode) {\n        return FLAGS.SIDES_9_x_9;\n    } else if (FLAGS.GAME_13_x_13 === mode) {\n        return FLAGS.SIDES_13_x_13;\n    } else if (FLAGS.GAME_19_x_19 === mode) {\n        return FLAGS.SIDES_19_x_19;\n    }\n};\n\nexport const getStarPointsConstant = (mode) => {\n    if (FLAGS.GAME_9_x_9 === mode) {\n        return FLAGS.STAR_POINTS_9_x_9;\n    } else if (FLAGS.GAME_13_x_13 === mode) {\n        return FLAGS.STAR_POINTS_13_x_13;\n    } else if (FLAGS.GAME_19_x_19 === mode) {\n        return FLAGS.STAR_POINTS_19_x_19;\n    }\n};\n\nexport const getCardinalDirection = (mode, coordinate) => {\n    if (FLAGS.CORNER_ALL_NW === coordinate) {\n        return FLAGS.NORTH_WEST;\n    } \n    \n    if (FLAGS.GAME_9_x_9 === mode) {\n        if (FLAGS.CORNER_9_x_9_SW === coordinate) {\n            return FLAGS.SOUTH_WEST;\n        } else if (FLAGS.CORNER_9_x_9_NE === coordinate) {\n            return FLAGS.NORTH_EAST;\n        } else if (FLAGS.CORNER_9_x_9_SE === coordinate) {\n            return FLAGS.SOUTH_EAST;\n        } else { // let me die I made these so cumbersome\n            if (FLAGS.MIN_COLUMN === coordinate[0]) {\n                return FLAGS.WEST;\n            } else if (FLAGS.MIN_ROW === coordinate.substring(1)) {\n                return FLAGS.NORTH;\n            } else if (FLAGS.MAX_9_x_9_COLUMN === coordinate[0]) {\n                return FLAGS.EAST;\n            } else if (FLAGS.MAX_9_x_9_ROW === coordinate.substring(1)) {\n                return FLAGS.SOUTH;\n            }\n        }\n\n        throw new Error('Avast ye matey, shouldn\"nt be branching to this island in 9 x 9');\n    }\n\n    if (FLAGS.GAME_13_x_13 === mode) {\n        if (FLAGS.CORNER_13_x_13_SW === coordinate) {\n            return FLAGS.SOUTH_WEST;\n        } else if (FLAGS.CORNER_13_x_13_NE === coordinate) {\n            return FLAGS.NORTH_EAST;\n        } else if (FLAGS.CORNER_13_x_13_SE === coordinate) {\n            return FLAGS.SOUTH_EAST;\n        } else { // let me die I made these so cumbersome\n            if (FLAGS.MIN_COLUMN === coordinate[0]) {\n                return FLAGS.WEST;\n            } else if (FLAGS.MIN_ROW === coordinate.substring(1)) {\n                return FLAGS.NORTH;\n            } else if (FLAGS.MAX_13_x_13_COLUMN === coordinate[0]) {\n                return FLAGS.EAST;\n            } else if (FLAGS.MAX_13_x_13_ROW === coordinate.substring(1)) {\n                return FLAGS.SOUTH;\n            }\n        }\n\n        throw new Error('Avast ye matey, shouldn\"nt be branching to this island in 13 x 13');\n    }\n\n    if (FLAGS.GAME_19_x_19 === mode) {\n        if (FLAGS.CORNER_19_x_19_SW === coordinate) {\n            return FLAGS.SOUTH_WEST;\n        } else if (FLAGS.CORNER_19_x_19_NE === coordinate) {\n            return FLAGS.NORTH_EAST;\n        } else if (FLAGS.CORNER_19_x_19_SE === coordinate) {\n            return FLAGS.SOUTH_EAST;\n        } else { // let me die I made these so cumbersome\n            if (FLAGS.MIN_COLUMN === coordinate[0]) {\n                return FLAGS.WEST;\n            } else if (FLAGS.MIN_ROW === coordinate.substring(1)) {\n                return FLAGS.NORTH;\n            } else if (FLAGS.MAX_19_x_19_COLUMN === coordinate[0]) {\n                return FLAGS.EAST;\n            } else if (FLAGS.MAX_19_x_19_ROW === coordinate.substring(1)) {\n                return FLAGS.SOUTH;\n            }\n        }\n\n        throw new Error('Avast ye matey, shouldn\"nt be branching to this island in 19 x 19');\n    }    \n};\n\n// Calculates how much space the board can have on the screen\nexport const calculateBoardDimensions = ({\n                                     windowHeight,\n                                     windowWidth,\n                                 }) => {\n    let desiredWidth = windowHeight * FLAGS.GOBAN_HEIGHT_TO_WIDTH_RATIO;\n    desiredWidth = windowWidth > desiredWidth ? desiredWidth : windowWidth - 10; // very scientific\n    const desiredHeight = desiredWidth * FLAGS.GOBAN_WIDTH_TO_HEIGHT_RATIO;\n\n    return {\n        height: Math.floor(desiredHeight),\n        width: Math.floor(desiredWidth),\n    };\n};\n\n//https://senseis.xmp.net/?EquipmentDimensions\n// This function determines the width and height of each renderable tile.\n// corners and sides will get an additional padding for aesthetic.\nexport const calculateTileDimensions = ({\n                                     mode,\n                                     boardHeight,\n                                     boardWidth,\n                                 }) => {\n    let tileRatio = 0;\n\n    if (FLAGS.GAME_9_x_9 === mode) {\n        tileRatio = Number(1/9);\n    } else if (FLAGS.GAME_13_x_13 === mode) {\n        tileRatio = Number(1/13);\n    } else if (FLAGS.GAME_19_x_19 === mode) {\n        tileRatio = Number(1/19);\n    } else {\n        throw new Error('No known mode');\n    }\n    \n    const height = Math.floor(boardHeight * tileRatio);\n    const width = Math.floor(boardWidth * tileRatio);\n\n    // Otherwise these calculations will cause lines to be drawn outside\n    // the bounding canvas\n    return {\n        height: height % 2 === 0 ? height : height - 1,\n        width: width % 2 === 0 ? width : width - 1,\n    };\n};\n\nexport const stoneRadius = (tileHeight) => {\n    return Math.floor((tileHeight * FLAGS.GOBAN_STONE_DIAMETER_TO_TILE_HEIGHT_RATIO) / 2);\n};\n\nexport const getCardinalAdjacencies = ({\n    mode,\n    colCoordinate,\n    rowCoordinate,\n}) => {\n    let coordinates;\n\n    if (FLAGS.GAME_9_x_9 === mode) {\n        coordinates = FLAGS.GRID_COORDINATES_9_x_9;\n    } else if (FLAGS.GAME_13_x_13 === mode) {\n        coordinates = FLAGS.GRID_COORDINATES_13_x_13;\n    } else if (FLAGS.GAME_19_x_19 === mode) {\n        coordinates = FLAGS.GRID_COORDINATES_19_x_19;\n    }\n\n    const maxIndex = coordinates.length - 1;\n\n    // 'a' is ASCII 97\n    const colIndex = parseInt(colCoordinate.charCodeAt(0) - 97);\n    const rowIndex = parseInt(rowCoordinate) - 1; // 0 indexed, dummy\n\n    const adjacencies = {};\n\n    if (rowIndex >= 1) {\n        adjacencies.north = coordinates[rowIndex - 1][colIndex];\n    }\n\n    if (colIndex < maxIndex) {\n        adjacencies.east = coordinates[rowIndex][colIndex + 1];\n    }\n\n    if (rowIndex < maxIndex) {\n        adjacencies.south = coordinates[rowIndex + 1][colIndex];\n    }\n\n    if (colIndex >= 1) {\n        adjacencies.west = coordinates[rowIndex][colIndex - 1];\n    }\n\n    return adjacencies;\n};\n\nexport const getAdjacentCoordinates = ({\n   mode,\n   colCoordinate,\n   rowCoordinate,\n}) => _.values(getCardinalAdjacencies({\n    mode,\n    colCoordinate,\n    rowCoordinate,\n}));\n\n// get adjacent stones of opposing color\n// get all connected stones in that opposing color group\n// determine if any of those connected stones have any liberties\n// return board state with dead groups removed\n\nexport const removeDeadStones = ({\n    existingStones,\n    mode,\n    newStoneColor,\n    newStoneColCoordinate,\n    newStoneRowCoordinate,\n}) => {\n    const opposingColor = FLAGS.STONE_BLACK === newStoneColor ? FLAGS.STONE_WHITE : FLAGS.STONE_BLACK;\n    const newStones = _.assign({}, existingStones, { [`${newStoneColCoordinate}${newStoneRowCoordinate}`]: newStoneColor });\n\n    // this will make sense in a few lines.. maybe\n    let cardinalAdjacencyMap = getCardinalAdjacencies({\n        mode,\n        colCoordinate: newStoneColCoordinate,\n        rowCoordinate: newStoneRowCoordinate,\n    });\n\n    let nextAdjacentCoordinates = [];\n\n    // Need to track the attacked groups separately to ensure proper removal\n    const attackedGroups = {\n        north: {\n            stones: [],\n            liberties: [],\n        },\n        east: {\n            stones: [],\n            liberties: [],\n        },\n        south: {\n            stones: [],\n            liberties: [],\n        },\n        west: {\n            stones: [],\n            liberties: [],\n        },\n    };\n\n    const isCoordinateProcessed = (coordinate) => {\n        for (const direction in attackedGroups) {\n            if (_.includes(attackedGroups[direction].stones, coordinate)) {\n                return true;\n            }\n        }\n\n        return false;\n    };\n\n    const shouldProcessCoordinate = (coordinate) => {\n        if (isCoordinateProcessed(coordinate)) {\n            return false;\n        }\n\n        if (newStones[coordinate] === opposingColor) {\n            return true;\n        }\n\n        return false;\n    };\n\n    for (const direction in cardinalAdjacencyMap) {\n        const coordinate = cardinalAdjacencyMap[direction];\n        const attackedGroup = attackedGroups[direction];\n\n        // For a while I forgot to process the initial coordinate. Smart.\n        if (shouldProcessCoordinate(coordinate)) {\n            nextAdjacentCoordinates.push(coordinate);\n            attackedGroup.stones.push(coordinate);\n        }\n\n        do {\n            // ... get adjacent allied stones and ones not already part of the group\n            nextAdjacentCoordinates = _.flatMap(nextAdjacentCoordinates, (coordinateToProcess) =>\n                _.filter(getAdjacentCoordinates({\n                    mode,\n                    colCoordinate: coordinateToProcess[0],\n                    rowCoordinate: coordinateToProcess.substring(1),\n                }), shouldProcessCoordinate)\n            );\n\n            attackedGroup.stones.push.apply(attackedGroup.stones, nextAdjacentCoordinates);\n        } while (nextAdjacentCoordinates.length !== 0);\n    }\n\n    for (const direction in attackedGroups) {\n        const attackedGroup = attackedGroups[direction];\n\n        for (const coordinateToProcess of attackedGroup.stones) {\n            nextAdjacentCoordinates = _.filter(getAdjacentCoordinates({\n                mode,\n                colCoordinate: coordinateToProcess[0],\n                rowCoordinate: coordinateToProcess.substring(1),\n            }), aCoordinate => !isCoordinateProcessed(aCoordinate)\n                && (!newStones[aCoordinate] || newStones[aCoordinate] === FLAGS.STONE_NONE));\n\n            attackedGroup.liberties.push.apply(attackedGroup.liberties, nextAdjacentCoordinates);\n        }\n    }\n\n    const stonesToRemove = [];\n    let survivingAttackedGroups = 0;\n\n    for (const direction in attackedGroups) {\n        const attackedGroup = attackedGroups[direction];\n\n        if (attackedGroup.liberties.length === 0) {\n            stonesToRemove.push.apply(stonesToRemove, attackedGroup.stones);\n        } else if (attackedGroup.stones.length > 0) {\n            survivingAttackedGroups++;\n        }\n    }\n\n    if (survivingAttackedGroups === _.keys(cardinalAdjacencyMap).length) {\n        return existingStones; // the placed stone died\n    }\n\n    return _.omit(newStones, stonesToRemove);\n};","import * as FLAGS from '../../game/flags';\nimport * as GAME_MATHS from '../../game/maths';\nimport * as ACTIONS from '../constants/actions';\nimport * as _ from 'lodash';\n\n// This maintains a map of coordinates as keys to placed stones.\n// the state is somewhat dynamic but predictable based on the\n// generally agreed upon goban coordinates\nconst initialState = {\n    mode: FLAGS.GAME_9_x_9,\n    koWarning: false,\n    currentBoardState: {},\n    previousBoardState: {},\n};\n\nconst board = (state = initialState, action) => {\n    switch (action.type) {\n        case ACTIONS.SET_MODE:\n            const { mode } = action.payload;\n\n            return {\n                ...initialState,\n                mode,\n            };\n        case ACTIONS.SET_STONE:\n            const {\n                colCoordinate,\n                rowCoordinate,\n                color,\n            } = action.payload;\n\n            const nextBoardState = GAME_MATHS.removeDeadStones({\n                existingStones: state.currentBoardState,\n                mode: state.mode,\n                newStoneColor: color,\n                newStoneColCoordinate: colCoordinate,\n                newStoneRowCoordinate: rowCoordinate,\n            });\n\n            const koWarning = _.isEqual(state.previousBoardState, nextBoardState);\n\n            if (koWarning) {\n                return {\n                    ...state,\n                    koWarning,\n                };\n            } else {\n                return {\n                    mode: state.mode,\n                    koWarning,\n                    currentBoardState: nextBoardState,\n                    previousBoardState: state.currentBoardState,\n                };\n            }\n        default:\n            return state;\n    }\n};\n\nexport default board;","export const SET_MODE = 'SET_MODE';\nexport const SET_TURN_NUMBER = 'SET_TURN_NUMBER';\nexport const SET_STONE = 'SET_STONE';\nexport const SET_WINDOW_DIMENSIONS = 'SET_WINDOW_DIMENSIONS';","import * as FLAGS from '../../game/flags';\nimport * as ACTIONS from '../constants/actions';\n\nconst initialState = {\n    canRender: false,\n    mode: FLAGS.GAME_9_x_9,\n    turnColor: FLAGS.TURN_BLACK,\n    turnNumber: 1,\n    windowHeight: null,\n    windowWidth: null,\n    blackCaptures: 0,\n    whiteCaptures: 0,\n};\n\nconst game = (state = initialState, action) => {\n    switch (action.type) {\n        case ACTIONS.SET_MODE:\n            // Maybe there's an argument for returning a spread operator'd initialState\n            return {\n                ...state,\n                mode: action.payload.mode,\n                turnNumber: 1,\n                blackCaptures: 0,\n                whiteCaptures: 0,\n            };\n        case ACTIONS.SET_STONE:\n            return {\n                ...state,\n                turnColor: state.turnColor === FLAGS.TURN_BLACK ? FLAGS.TURN_WHITE : FLAGS.TURN_BLACK,\n                turnNumber: state.turnNumber + 1,\n            };\n        case ACTIONS.SET_WINDOW_DIMENSIONS:\n            const {\n                windowHeight,\n                windowWidth,\n            } = action.payload;\n\n            return {\n                ...state,\n                canRender: true,\n                windowHeight,\n                windowWidth,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default game;","import { createSelector } from 'reselect';\nimport * as FLAGS from '../../game/flags';\n\n// This may have been pointless\nconst boardCoordinateSelector = (state, props) => state.board.currentBoardState[`${props.colCoordinate}${props.rowCoordinate}`];\n\nexport const placedStoneSelector = createSelector(\n    boardCoordinateSelector,\n    placedStoneAtCoordinate => {\n        if (!placedStoneAtCoordinate) {\n            return FLAGS.STONE_NONE;\n        }\n\n        return placedStoneAtCoordinate;\n    }\n);","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport * as UTILS from './game/maths';\nimport * as FLAGS from './game/flags';\nimport { setStone } from './store/actions/board';\nimport { placedStoneSelector } from './store/selectors/board';\nimport { connect } from 'react-redux';\n\nclass Tile extends Component {\n    constructor(props) {\n        super(props);\n\n        this.showPreviewStone = this.showPreviewStone.bind(this);\n        this.clearCanvas = this.clearCanvas.bind(this);\n        this.drawTile = this.drawTile.bind(this);\n        this.onClick = this.onClick.bind(this);\n        this.onMouseOver = this.onMouseOver.bind(this);\n        this.onMouseOut = this.onMouseOut.bind(this);\n    }\n\n    componentDidMount() {\n        this.drawTile();\n    }\n\n    componentDidUpdate() {\n        this.drawTile();\n    }\n\n    getCanvasContextPresets() {\n        const canvas = this.refs.canvas;\n        const ctx = canvas.getContext('2d');\n        ctx.lineWidth = 4; // 4 pixels is a little over a millimeter. Yeah I know mobile yada yada\n        return ctx;\n    }\n\n    drawTile() {\n        const {\n            mode,\n            rowCoordinate,\n            colCoordinate,\n            stonePlaced,\n        } = this.props;\n\n        // Render the stone first, that way we can clear appropriately\n        // when the component is updated.\n        if (FLAGS.STONE_NONE === stonePlaced) {\n            this.clearCanvas();\n        } else {\n            this.drawStone();\n        }\n\n        if (UTILS.getCornersConstant(mode).includes(`${colCoordinate}${rowCoordinate}`)) {\n            this.drawCorner();\n        } else if (UTILS.getSidesConstant(mode).includes(`${colCoordinate}${rowCoordinate}`)) {\n            this.drawSide();\n        } else if (UTILS.getStarPointsConstant(mode).includes(`${colCoordinate}${rowCoordinate}`)) {\n            this.drawStarPoint();\n        } else {\n            this.drawIntersection();\n        }\n    }\n\n    drawSide() {\n        const {\n            height,\n            mode,\n            width,\n            rowCoordinate,\n            colCoordinate,\n        } = this.props;\n\n        const ctx = this.getCanvasContextPresets();\n\n        const cardinalDirection = UTILS.getCardinalDirection(mode, `${colCoordinate}${rowCoordinate}`);\n\n        const midX = width / 2;\n        const midY = height / 2;\n\n        ctx.beginPath();\n        ctx.font = '18px monospace';\n\n        if (FLAGS.WEST === cardinalDirection) {\n            ctx.moveTo(midX, 0);\n            ctx.lineTo(midX, height);\n            ctx.moveTo(midX, midY);\n            ctx.lineTo(width, midY);\n            ctx.fillText(rowCoordinate, 0, midY + 4);\n        } else if (FLAGS.NORTH === cardinalDirection) {\n            ctx.moveTo(0, midY);\n            ctx.lineTo(width, midY);\n            ctx.moveTo(midX, midY);\n            ctx.lineTo(midX, height);\n            ctx.fillText(colCoordinate, midX, 18);\n        } else if (FLAGS.EAST === cardinalDirection) {\n            ctx.moveTo(midX, 0);\n            ctx.lineTo(midX, height);\n            ctx.moveTo(0, midY);\n            ctx.lineTo(midX, midY);\n            ctx.fillText(rowCoordinate, width - 20, midY + 4);\n        } else if (FLAGS.SOUTH === cardinalDirection) {\n            ctx.moveTo(0, midY);\n            ctx.lineTo(width, midY);\n            ctx.moveTo(midX, 0);\n            ctx.lineTo(midX, midY);\n            ctx.fillText(colCoordinate, midX, height - 10);\n        }\n\n        ctx.stroke();\n    }\n\n    drawCorner() {\n        const {\n            height,\n            mode,\n            width,\n            rowCoordinate,\n            colCoordinate,\n        } = this.props;\n\n        const ctx = this.getCanvasContextPresets();\n\n        const cardinalDirection = UTILS.getCardinalDirection(mode, `${colCoordinate}${rowCoordinate}`);\n\n        const midX = width / 2;\n        const midY = height / 2;\n\n        ctx.beginPath();\n        ctx.font = '18px monospace';\n\n        if (FLAGS.NORTH_EAST === cardinalDirection) {\n            ctx.moveTo(0, midY);\n            ctx.lineTo(midX, midY);\n            ctx.lineTo(midX, height);\n            ctx.fillText(colCoordinate, midX - 4, 18);\n            ctx.fillText(rowCoordinate, width - 20, midY + 4);\n        } else if (FLAGS.SOUTH_EAST === cardinalDirection) {\n            ctx.moveTo(midX, 0);\n            ctx.lineTo(midX, midY);\n            ctx.lineTo(0, midY);\n            ctx.fillText(colCoordinate, midX - 4, height - 10);\n            ctx.fillText(rowCoordinate, width - 20, midY);\n        } else if (FLAGS.SOUTH_WEST === cardinalDirection) {\n            ctx.moveTo(width, midY);\n            ctx.lineTo(midX, midY);\n            ctx.lineTo(midX, 0);\n            ctx.fillText(colCoordinate, midX, height - 10);\n            ctx.fillText(rowCoordinate, 0, midY);\n        } else if (FLAGS.NORTH_WEST === cardinalDirection) {\n            ctx.moveTo(midX, height);\n            ctx.lineTo(midX, midY);\n            ctx.lineTo(width, midY);\n            ctx.fillText(colCoordinate, midX, 18);\n            ctx.fillText(rowCoordinate, 0, midY);\n        }\n\n        ctx.stroke();        \n    }\n    \n    drawIntersection() {\n        const {\n            height,\n            width,\n        } = this.props;\n\n        const ctx = this.getCanvasContextPresets();\n\n        const midX = width / 2;\n        const midY = height / 2;\n\n        ctx.beginPath();\n        ctx.moveTo(0, midY);\n        ctx.lineTo(width, midY);\n        ctx.moveTo(midX, 0);\n        ctx.lineTo(midX, height);\n        ctx.stroke();\n    }\n\n    drawStarPoint() {\n        const {\n            height,\n            width,\n        } = this.props;\n\n        const ctx = this.getCanvasContextPresets();\n\n        const midX = width / 2;\n        const midY = height / 2;\n\n        ctx.beginPath();\n        ctx.arc(midX, midY, 5, 0, 2 * Math.PI);\n        ctx.fillStyle = '#000000';\n        ctx.fill();\n        ctx.moveTo(0, midY);\n        ctx.lineTo(width, midY);\n        ctx.moveTo(midX, 0);\n        ctx.lineTo(midX, height);\n        ctx.stroke();\n    }\n\n    drawStone() {\n        const { stonePlaced } = this.props;\n\n        this.drawStoneInternal(FLAGS.STONE_BLACK === stonePlaced);\n    }\n\n    drawStoneInternal(isBlack) {\n        const {\n            height,\n            stoneRadius,\n            width,\n        } = this.props;\n\n        const canvas = this.refs.canvas;\n        const ctx = canvas.getContext('2d');\n\n        const midX = width / 2;\n        const midY = height / 2;\n\n        ctx.beginPath();\n        ctx.arc(midX, midY, stoneRadius, 0, 2 * Math.PI);\n\n        if (isBlack) {\n            ctx.fillStyle = '#000000';\n            ctx.fill();\n        }\n\n        ctx.stroke();\n    }\n\n    showPreviewStone() {\n        const { turnColor } = this.props;\n\n        this.drawStoneInternal(FLAGS.TURN_BLACK === turnColor);\n    }\n\n    clearCanvas() {\n        const {\n            height,\n            width,\n        } = this.props;\n\n        const canvas = this.refs.canvas;\n        const ctx = canvas.getContext('2d');\n\n        ctx.clearRect(0, 0, width, height);\n    }\n\n    onMouseOver() {\n        if (FLAGS.STONE_NONE === this.props.stonePlaced) {\n            this.showPreviewStone();\n        }\n    }\n\n    onMouseOut() {\n        if (FLAGS.STONE_NONE === this.props.stonePlaced) {\n            this.clearCanvas();\n            this.drawTile();\n        }\n    }\n\n    onClick() {\n        if (FLAGS.STONE_NONE === this.props.stonePlaced) {\n            this.props.setStone();\n        }\n    }\n\n    render() {\n        const {\n            height,\n            width,\n        } = this.props;\n\n        return (\n            <canvas\n                height={height}\n                width={width}\n                ref=\"canvas\"\n                onMouseOver={this.onMouseOver}\n                onMouseOut={this.onMouseOut}\n                onClick={this.onClick}\n            />\n        );\n    }\n}\n\nTile.propTypes = {\n    rowCoordinate: PropTypes.string.isRequired,\n    colCoordinate: PropTypes.string.isRequired,\n    height: PropTypes.number.isRequired,\n    stoneRadius: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n    mode: PropTypes.string.isRequired,\n    stonePlaced: PropTypes.string.isRequired,\n    turnColor: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        stonePlaced: placedStoneSelector(state, ownProps),\n        turnColor: state.game.turnColor,\n    };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    const {\n        colCoordinate,\n        rowCoordinate,\n    } = ownProps;\n\n    return {\n        setStone: () => {\n            dispatch(setStone(colCoordinate, rowCoordinate));\n        },\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Tile);","import * as TYPES from '../constants/actions';\nimport * as FLAGS from '../../game/flags';\n\nconst setStoneInternal = (colCoordinate, rowCoordinate, color) => ({\n    type: TYPES.SET_STONE,\n    payload: {\n        colCoordinate,\n        rowCoordinate,\n        color,\n    },\n});\n\nexport const setStone = (colCoordinate, rowCoordinate) => {\n    return (dispatch, getState) => {\n        const { turnColor } = getState().game;\n        const color = FLAGS.TURN_BLACK === turnColor ? FLAGS.STONE_BLACK : FLAGS.STONE_WHITE;\n\n        dispatch(setStoneInternal(colCoordinate, rowCoordinate, color));\n    };\n};","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as _ from 'lodash';\nimport * as FLAGS from './game/flags';\nimport * as GAME_MATHS from './game/maths';\nimport Tile from './Tile';\n\nclass Board extends Component {\n    getCoordinates() {\n        const { mode } = this.props;\n\n        // Yay hardcoding\n        if (mode === FLAGS.GAME_9_x_9) {\n            return FLAGS.GRID_COORDINATES_9_x_9;\n        } else if (mode === FLAGS.GAME_13_x_13) {\n            return FLAGS.GRID_COORDINATES_13_x_13;\n        } else if (mode === FLAGS.GAME_19_x_19) {\n            return FLAGS.GRID_COORDINATES_19_x_19;\n        } else {\n            throw new Error('No known mode selected');\n        }\n    }\n\n    renderRow(aRow) {\n        const {\n            mode,\n            stoneRadius,\n            tileDimensions,\n        } = this.props;\n\n        const numberCoordinate = aRow[0].substring(1);\n\n        return <div\n            key={`${mode}${numberCoordinate}`}\n            className=\"tiles-container\"\n        >\n            {_.map(aRow, aCoordinate => {\n                const letterCoordinate = aCoordinate[0];\n\n                return <Tile\n                    key={`${mode}${letterCoordinate}${numberCoordinate}`}\n                    colCoordinate={letterCoordinate}\n                    rowCoordinate={numberCoordinate}\n                    height={tileDimensions.height}\n                    stoneRadius={stoneRadius}\n                    width={tileDimensions.width}\n                    mode={mode}\n                />;\n            })}\n        </div>;\n    }\n\n    // I may have reversed this? https://senseis.xmp.net/?Coordinates\n    render() {\n        const coordinates = this.getCoordinates();\n\n        return (\n            <div id=\"board\">\n                {_.map(coordinates, aRow => {\n                    return this.renderRow(aRow);\n                })}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    const {\n        mode,\n        windowHeight,\n        windowWidth,\n    } = state.game;\n\n    const boardDimensions =\n        GAME_MATHS.calculateBoardDimensions({\n            windowHeight,\n            windowWidth,\n        });\n\n    const tileDimensions =\n        GAME_MATHS.calculateTileDimensions({\n            mode,\n            boardHeight: boardDimensions.height,\n            boardWidth: boardDimensions.width,\n        });\n\n    const stoneRadius = GAME_MATHS.stoneRadius(tileDimensions.height);\n\n    return {\n        mode,\n        stoneRadius,\n        tileDimensions,\n    };\n};\n\nexport default connect(mapStateToProps)(Board);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as FLAGS from './game/flags';\nimport {\n    setMode,\n} from './store/actions/game';\n\nclass Configuration extends Component {\n    getHumanReadableMode() {\n        const { mode } = this.props;\n\n        if (mode === FLAGS.GAME_9_x_9) {\n            return '9 x 9';\n        } else if (mode === FLAGS.GAME_13_x_13) {\n            return '13 x 13';\n        } else if (mode === FLAGS.GAME_19_x_19) {\n            return '19 x 19';\n        } else {\n            throw new Error('No known mode selected');\n        }\n    }\n\n    render() {\n        const {\n            mode,\n            setMode,\n        } = this.props;\n\n        return (\n            <div id=\"configuration\">\n                <h1>Go Demo Board</h1>\n                <div className=\"flex-container\">\n                    <div>\n                        <h4>Mode: {this.getHumanReadableMode()}</h4>\n                        <h4>Turn Number: {this.props.turnNumber}</h4>\n                    </div>\n                    <form>\n                        <select\n                            onChange={e => setMode(e.target.value)}\n                            value={mode}\n                        >\n                            <option value={FLAGS.GAME_9_x_9}>9 x 9</option>\n                            <option value={FLAGS.GAME_13_x_13}>13 x 13</option>\n                            <option value={FLAGS.GAME_19_x_19}>19 x 19</option>\n                        </select>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        mode: state.game.mode,\n        turnNumber: state.game.turnNumber,\n    };\n};\n\nconst mapDispatchToProps = dispatch => ({\n    setMode: (mode) => {\n        dispatch(setMode(mode))\n    },\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Configuration);","import * as TYPES from '../constants/actions';\n\nexport const setMode = mode => ({\n    type: TYPES.SET_MODE,\n    payload: {\n        mode,\n    },\n});\n\nexport const setTurnNumber = turnNumber => ({\n    type: TYPES.SET_TURN_NUMBER,\n    payload: {\n        turnNumber,\n    },\n});\n\nexport const setWindowDimensions = (windowWidth, windowHeight) => ({\n    type: TYPES.SET_WINDOW_DIMENSIONS,\n    payload: {\n        windowWidth,\n        windowHeight,\n    },\n});","import React, { Component } from 'react';\nimport Board from './Board';\nimport Configuration from './Configuration';\nimport { connect } from 'react-redux';\nimport { setWindowDimensions } from './store/actions/game';\nimport './styles/index.css';\n\nclass App extends Component {\n    // Always seems like garbage when .bind() is used\n    constructor(props) {\n        super(props);\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n    }\n\n    componentDidMount() {\n        this.updateWindowDimensions();\n        window.addEventListener('resize', this.updateWindowDimensions);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateWindowDimensions);\n    }\n\n    updateWindowDimensions() {\n        this.props.setWindowDimensions(window.innerWidth, window.innerHeight);\n    }\n\n    render() {\n        const { canRender } = this.props;\n\n        return (\n            <div className=\"App app-container\">\n                <div className=\"board-container\">\n                    {canRender && <Board/>}\n                    {!canRender && <h1>Please wait...</h1>}\n                </div>\n                <div className=\"configuration-container\">\n                    <Configuration/>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    const {\n        canRender,\n        mode,\n    } = state.game;\n\n    return {\n        mode,\n        canRender,\n    };\n};\n\nconst mapDispatchToProps = dispatch => ({\n    setWindowDimensions: (windowWidth, windowHeight) => {\n        dispatch(setWindowDimensions(windowWidth, windowHeight))\n    },\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// Redux boilerplate\nimport { Provider } from 'react-redux'\nimport configureStore from './store/configureStore'\n\n// More potentially specific imports to this domain\nimport App from './App';\n\n\nconst store = configureStore();\nconst rootElement = document.getElementById('root');\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    rootElement\n);\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport loggerMiddleware from './middleware/logger';\nimport boardReducer from './reducers/board';\nimport gameReducer from './reducers/game';\n\nexport default function configureStore(preloadedState) {\n    const middlewareEnhancer = applyMiddleware(thunkMiddleware, loggerMiddleware);\n\n    const enhancers = [middlewareEnhancer];\n    const composedEnhancers = composeWithDevTools(...enhancers);\n\n    const rootReducer = combineReducers({\n        board: boardReducer,\n        game: gameReducer,\n    });\n\n    return createStore(rootReducer, preloadedState, composedEnhancers);\n}"],"sourceRoot":""}